<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TelegramBot</name>
    </assembly>
    <members>
        <member name="T:Library.Administrador">
            <summary>
            Clase que modela el rol de administrador.
            Es el encargado de generar las invitaciones para las empresas.
            </summary>
        </member>
        <member name="P:Library.Administrador.Id">
            <summary>
            Guarda el id de el administrador al registrarse. 
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Administrador.Nombre">
            <summary>
            Guarda el nombre que pone el administrador al registrarse. 
            </summary>
            <value></value>
        </member>
        <member name="M:Library.Administrador.#ctor(System.Int32,System.String)">
            <summary>
            Constructor de la clase Administrador.
            </summary>
            <param name="Id"></param>
            <param name="Nombre"></param>
        </member>
        <member name="M:Library.Administrador.CrearInvitacion(System.String,System.String,System.String,System.String)">
            <summary>
            Método que crea el objeto empresa y su token de invitación.
            </summary>
            <param name="nombre">Nombre de la empresa.</param>
            <param name="ubicacion">Ubicación de la empresa.</param>
            <param name="rubro">Rubro de la empresa.</param>
            <param name="token">Token de invitación creada por el administrador.</param>   
        </member>
        <member name="T:Library.BuscarEmprendedorId">
            <summary>
            Clase para buscar un emprendedor por su id. Cumple con SRP, ya que existe una clase que conoce
            todas las instancias de emprendedor pero no tiene la responsabilidad de buscar.
            </summary>
        </member>
        <member name="M:Library.BuscarEmprendedorId.Buscar(System.Int32)">
            <summary>
            Método que busca un emprendedor por su Id.
            </summary>
            <param name="id">Id para buscar el emprendedor</param>
            <returns></returns>
        </member>
        <member name="T:Library.BuscarEmpresaPorPublicacion">
            <summary>
            Clase que sirve para buscar empresas. Cumple con SRP, ya que hay una clase encargada de
            conocer todas las empresas que no tiene la responsabilidad de buscarlas.
            </summary>
        </member>
        <member name="M:Library.BuscarEmpresaPorPublicacion.Buscar(System.String)">
            <summary>
            Método para buscar una empresa a partir de una publicación.
            </summary>
            <param name="nombrePublicacion">Se pasa el nombre de la publicación para buscar la empresa.</param>
            <returns></returns>
        </member>
        <member name="T:Library.BusquedaCategoria">
            <summary>
            Busqueda por categoría. Recorre la lista de todas las publicaciones y devuelve una lista con las coincidencias 
            en categoría.
            Se decide crear esta clase para cumplir SRP ya que, esta se encarga solo de realizar la búsqueda por categoría.
            Esta clase colabora con BuscarPublicacionHandler y BuscarPublicacion.
            </summary>
        </member>
        <member name="M:Library.BusquedaCategoria.Buscar(System.String)">
            <summary>
            Toma como parámetro una categoría y recorre la lista de publicaciones buscando coincidencias.
            </summary>
            <param name="categoria">Categoria del material que se quiere buscar.</param>
            <returns>Lista de coincidencias.</returns>
        </member>
        <member name="T:Library.BusquedaKeyWord">
            <summary>
            Busqueda por palabras clave. Recorre la lista de todas las publicaciones y devuelve una lista con las coincidencias 
            en palabras clave.
            Se decide crear esta clase para cumplir SRP ya que, esta se encarga solo de realizar la búsqueda por Palabras clave.
            Esta clase colabora con BuscarPublicacionHandler y BuscarPublicacion.
            </summary>
        </member>
        <member name="M:Library.BusquedaKeyWord.Buscar(System.String)">
            <summary>
            Busqueda por palabras clave. Recorre la lista de todas las publicaciones y devuelve una lista con las coincidencias.
            </summary>
            <param name="palabras">Palabra clave que ayuda a la busqueda.</param>
            <returns></returns>
        </member>
        <member name="T:Library.BusquedaZonaCiudad">
            <summary>
            Busqueda por zona. Recorre la lista de todas las publicaciones y devuelve una lista con las coincidencias en zona.
            Se decide crear esta clase para cumplir SRP ya que, esta se encarga solo de realizar la búsqueda por zona.
            Esta clase colabora con BuscarPublicacionHandler y BuscarPublicacion.
            </summary>
        </member>
        <member name="M:Library.BusquedaZonaCiudad.Buscar(System.String,System.String)">
            <summary>
            Busqueda por zona. Recorre la lista de todas las publicaciones y devuelve una lista con las coincidencias.
            </summary>
            <param name="tipoZona">Tipo de zona en que se desea buscar(Ciudad, Departamento, etc).</param>
            <param name="ubicacion">Nombre de la zona.</param>
            <returns></returns>
        </member>
        <member name="T:Library.Conversacion">
            <summary>
            La clase conversación se encarga de llevar el conteo de mensajes de cada uno de los ususarios.
            Esta clase está pensada para la proxima entrega, nos va ayudar a poder identificar el estado de la conversación. 
            </summary>
        </member>
        <member name="P:Library.Conversacion.id">
            <summary>
            Guarda el id del usuario.
            </summary>
            <value></value>
        </member>
        <member name="F:Library.Conversacion.mensajes">
            <summary>
            Lista donde se guardan los mensajes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.Conversacion.AgregarMensaje(System.String)">
            <summary>
            Método encargado de agregar el mensaje enviado como parámetro a la lista de mensajes.
            </summary>
            <param name="mensaje">Mensaje a agregar en la conversación.</param>
        </member>
        <member name="T:Library.Emprendedor">
            <summary>
            Clase que modela un usario del tipo emprendedor. 
            Implementa la interfaz IUsuario, para lograr facilitar la extensión en caso de que 
            surjan nuevos tipos de usuario.
            </summary>
        </member>
        <member name="P:Library.Emprendedor.Id">
            <summary>
            Id del Emprendedor.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Emprendedor.Nombre">
            <summary>
            Nombre del emprendedor.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Emprendedor.Ubicacion">
            <summary>
            Ubicación del emprendedor.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Emprendedor.Rubro">
            <summary>
            Rubro del emprendedor.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Emprendedor.Habilitaciones">
            <summary>
            Habilitaciones del emprendedor(Link al documento).
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Emprendedor.Especializaciones">
            <summary>
            Especializaciones del emprendedor.
            </summary>
            <value></value>
        </member>
        <member name="M:Library.Emprendedor.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor de la clase emprendedor.
            </summary>
            <param name="id">Id del emprendedor</param>
            <param name="nombre">Nombre del emprendedor</param>
            <param name="ubicacion">Ubicación del emprendedor</param>
            <param name="rubro">Rubro del emprendedor</param>
            <param name="habilitaciones">Habilitaciones que tiene el emprendedor</param>
            <param name="especializaciones">Especializaciones que tiene el emprendedor</param>
        </member>
        <member name="T:Library.Empresa">
            <summary>
            Clase que modela un usario del tipo empresa. 
            Implementa la interfaz IUsuario, para lograr facilitar la extensión en caso de que 
            surjan nuevos tipos de usuario.
            </summary>
        </member>
        <member name="P:Library.Empresa.Invitacion">
            <summary>
            Guarda la invitación de la empresa.
            </summary>
            <value></value>
        </member>
        <member name="F:Library.Empresa.ListaEmpresarios">
            <summary>
            La listaIdEmpresarios se encarga de registrar todos los usuarios que 
            puede tener una misma empresa.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Empresa.Nombre">
            <summary>
            Guarda el nombre de la empresa.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Empresa.Ubicacion">
            <summary>
            Guarda la ubicación de la empresa. 
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Empresa.Rubro">
            <summary>
            Guarda el rubro de la empresa.
            </summary>
            <value></value>
        </member>
        <member name="M:Library.Empresa.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Es el constructor que se encarga de crear a la empresa en su totalidad.
            </summary>
            <param name="nombre">Se encarga de guardar el nombre de la empresa dentro del objeto empresa.</param>
            <param name="ubicacion">Se encarga de guardar la ubicación de la empresa dentro del objeto empresa.</param>
            <param name="rubro">Se encarga de guardar el rubro de la empresa dentro del objeto empresa.</param>
            <param name="invitacion">Se encarga de guardar la invitación de la empresa dentro del objeto empresa.</param>
        </member>
        <member name="T:Library.Material">
            <summary>
            Esta clase se encarga del modelado del material.
            </summary>
        </member>
        <member name="P:Library.Material.Nombre">
            <summary>
            Se encarga de guardar el nombre del material dentro del objeto material.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Material.Costo">
            <summary>
            Se encarga de guardar el costo del material dentro del objeto material.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Material.Cantidad">
            <summary>
            Se encarga de guardar la cantidad que existe del mismo dentro del objeto material.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Material.Unidad">
            <summary>
            Se encarga de guardar la unidad en la cual se pesa el material dentro del objeto material.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Material.Habilitaciones">
            <summary>
            Se encarga de guardar las habliitaciones, que se necesitan para obtener el material, dentro del objeto material.
            Link al documento.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Material.Categoria">
            <summary>
            Se encarga de guardar la categoría del material dentro del objeto material.
            </summary>
            <value></value>
        </member>
        <member name="F:Library.Material.PosiblesCategorias">
            <summary>
            Lista que contiene las categorías del material.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.Material.#ctor(System.String,System.Double,System.Double,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="Nombre">El nombre del material.</param>
            <param name="Costo">El costo del material.</param>
            <param name="Cantiadad">La cantidad del material.</param>
            <param name="Unidad">La unidad en la cual se cuantifica el material.</param>
            <param name="Habilitaciones">Las habliitaciones que se necesitan para el material.</param>
            <param name="categoria">La categoría del material.</param>
        </member>
        <member name="T:Library.Publicacion">
            <summary>
            Clase que modela un usario del tipo publicación. 
            </summary>
        </member>
        <member name="F:Library.Publicacion.Vendedor">
            <summary>
            Nombre de quien hace la publicación.
            </summary>
        </member>
        <member name="F:Library.Publicacion.Titulo">
            <summary> 
            Se encarga de guardar el título de la publicación dentro del objeto publicación.
            </summary>
            <value></value>
        </member>
        <member name="F:Library.Publicacion.Material">
            <summary>
            Se encarga de guardar el material de la publicación dentro del objeto publicación.
            </summary>
            <value></value>
        </member>
        <member name="F:Library.Publicacion.PalabrasClave">
            <summary>
            Se encarga de guardar las palabras claves para lograr una búsqueda efectiva dentro del objeto publicación.
            </summary>
        </member>
        <member name="F:Library.Publicacion.FrecuenciaDeDisponibilidad">
            <summary>
            Permite conocer cada cuánto tiempo se genera el mismo y los guarda en el objeto material. 
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Publicacion.Ubicacion">
            Atributo en dónde se guarda la ubicación del material.
        </member>
        <member name="M:Library.Publicacion.#ctor(System.String,Library.Material,System.String,System.String,Library.IUbicacion,Library.Empresa)">
            <summary>
            Constructor de la clase Publicacion.
            </summary>
            <param name="titulo">Título de la publicación</param>
            <param name="material">Material que se va a publicar</param>
            <param name="palabrasClave">Palabras clave para buscar la publicación</param>
            <param name="frecuenciaDeDisponibilidad">Frecuencia de disponibilidad del material</param>
            <param name="ubicacion">Ubicación del vendedor</param>
            <param name="empresa">Nombre de quien vende el material</param>
        </member>
        <member name="T:Library.Transaccion">
            <summary>
            Clase que modela las transacciones entre emprendedores y empresas o viceversa. 
            </summary>
        </member>
        <member name="F:Library.Transaccion.Vendedor">
            <summary>
            El vendedor es un objeto del tipo Empresa.
            </summary>
        </member>
        <member name="F:Library.Transaccion.Comprador">
            <summary>
            El Comprador es un objeto de tipo Emprendedor 
            </summary>
        </member>
        <member name="F:Library.Transaccion.NombreDelMaterial">
            <summary>
            El NombreDelMaterial es el nombre del material que se vendió o se compró.
            </summary>
        </member>
        <member name="F:Library.Transaccion.Cantidad">
            <summary>
            La cantidad del material que se vendió o se compró.
            </summary>
        </member>
        <member name="M:Library.Transaccion.#ctor(Library.Empresa,Library.Emprendedor,System.String,System.Double)">
            <summary>
            Constructor de la clase.
            </summary>
            <param name="vendedor">Vendedor, es un objeto de la clase Empresa</param>
            <param name="comprador">Comprador, es un objeto de la clase Emprendedor</param>
            <param name="nombre">Nombre del material, tipo string</param>
            <param name="cantidad">Cantidad del material, tipo double</param>
        </member>
        <member name="T:Library.Ubicacion">
            <summary>
            Clase que modela una ubicación.
            Implementa IUbicacion.
            Colabora con: UbicacionProvider,
            </summary>
        </member>
        <member name="P:Library.Ubicacion.Pais">
            <summary>
            Propiedad que almacena el País.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Ubicacion.Ciudad">
            <summary>
            Propiedad que almacena la Ciudad.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Ubicacion.Direccion">
            <summary>
            Propiedad que almacena la dirección.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Ubicacion.CodigoPostal">
            <summary>
            Propiedad que almacena el código postal. 
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Ubicacion.Latitud">
            <summary>
            Propiedad que almacena la Latitud de las coordenadas.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Ubicacion.Longitud">
            <summary>
            Propiedad que almacena la Longitud de las coordenadas.
            </summary>
            <value></value>
        </member>
        <member name="M:Library.Ubicacion.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor de la clase.
            </summary>
            <param name="pais"></param>
            <param name="ciudad"></param>
            <param name="direccion"></param>
            <param name="codigoPostal"></param>
            <param name="latitud"></param>
            <param name="longitud"></param>
        </member>
        <member name="T:Library.UbicacionProvider">
            <summary>
            Esta clase se encarga de generar una ubicación utilizando la API Location. 
            Implementa la interfaz IUbicacionProvider por DIP(Explicado en IUbicacionProvider).
            Depende de IUbicacion y colabora con CrearPublicacionHandler
            </summary>
        </member>
        <member name="M:Library.UbicacionProvider.GetUbicacion(System.String)">
            <summary>
            GetUbicacion es el método que al pasarle una udirección la convierte en un objeto de tipo IUbicacion. 
            </summary>
            <param name="ubicacion">Es la dirección que pasa el cliente.</param>
            <returns></returns>
        </member>
        <member name="T:Library.BuscarPublicacion">
            <summary>
            Pregunta por el tipo de búsqueda, pide a la clase correspondiente que la realice y
            devuelve una lista con las coincidencias.
            Además, se deberá preguntar por los parámetros necesarios para la búsqueda.
            En caso de una búsqueda por más de un tipo, se realizan todas las búsquedas y 
            devuelve las coincidencias comunes a todas las búsquedas.
            Esta clase además cumple con el principio SRP, ya que tiene como responsabilidad
            devolver una lista de publicaciones que cumplen con lo buscado, pero delega
            la responsabilidad de buscar a otras clases. 
            </summary>
        </member>
        <member name="F:Library.BuscarPublicacion.TipoBusqueda">
            <summary>
            Contiene el tipo de búsqueda que se va a realizar
            </summary>
        </member>
        <member name="F:Library.BuscarPublicacion.Busqueda">
            <summary>
            Lo que se desea buscar.
            </summary>
        </member>
        <member name="F:Library.BuscarPublicacion.result">
            <summary>
            Lista de coincidencias de la búsqueda.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.BuscarPublicacion.#ctor(System.String,System.String)">
            <summary>
            Constructor de la clase.
            </summary>
            <param name="tipobusqueda"></param>
            <param name="busqueda"></param>
        </member>
        <member name="M:Library.BuscarPublicacion.EjecutarComando">
            <summary>
            EjecutarComando se encarga de decidir qué tipo de búsqueda se va a realizar(categoría, zona y 
            palabras claves). Luego las delega a cada una de las clases que se encargan de 
            búsqueda, para cumplir con SRP. 
            Finalmente, devuelve una lista con todas la publiaciones encontradas, de la búsqueda
            que se realizó. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Library.VerHistorial">
            <summary>
            Clase que permite al usuario(emprendedor, empresa) ver su historial de compra o venta. 
            </summary>
        </member>
        <member name="M:Library.VerHistorial.EjecutarComando(System.Int32)">
            <summary>
            Método que recorre la lista de transacciones de el usuario y retorna su historial.
            </summary>
            <param name="nombre">Nombre de quien quiere ver el historial</param>
            <returns></returns>
        </member>
        <member name="T:Library.EntaradaDeLaCadena">
            <summary>
            IEntradaDeLaCadena y IEntradaInt cumplen con el patrón de ISP ya que se utilizan interfaces chicas para implementar solo el comportamiento
            que las clases necesiten, para de esa forma no acumular todo en IFormatoDeEntrada.
            </summary>
        </member>
        <member name="M:Library.EntaradaDeLaCadena.GetInput(System.String)">
            <summary>
            El GetInput es método el cúal despliega un mensaje en consola y recibe su respuesta.
            </summary>
            <param name="message">Mensaje para mostrar en cosola.</param>
            <returns></returns>
        </member>
        <member name="T:Library.LectorTest">
            <summary>
            LectorTest hereda la clase de EntradaDeLaCadena para simular la interacción con el 
            usuario en los tests.
            Cumple con DIP pues la comunicación es a través de clases de alto nivel y
            abstracciones (Interfaces).
            Cumple SRP pues su única razón de cambio es recibir una línea de la consola.
            Se aplica el patrón Polimorfismo ya que se decide cuál de los métodos GetInput 
            usar en tiempo de ejecución, dependiendo del objeto que recibe el mensaje GetInput. 
            </summary>
        </member>
        <member name="M:Library.LectorTest.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Constructor de la clase
            </summary>
            <param name="dic">diccionario del cual se leen las claves</param>
        </member>
        <member name="M:Library.LectorTest.GetInput(System.String)">
            <summary>
            El GetInput es método el cúal despliega un mensaje en consola y recibe su respuesta.
            </summary>
            <param name="message">Mensaje que se muestra en consola al usuario</param>
            <returns></returns>
        </member>
        <member name="T:Library.LeerConsola">
            <summary>
            LeerConsola es una implementación de la interface IEntaradaDeLaCadena para interactuar con el usuario a través de la
            consola. Cumple con DIP pues la comunicación es a través de clases de alto nivel y abstracciones (Interfaces).
            Cumple SRP pues su unica razon de cambio es recibir una linea de la consola.
            </summary>
        </member>
        <member name="M:Library.LeerConsola.GetInput(System.String)">
            <summary>
            El GetInput es método el cúal despliega un mensaje en consola y recibe su respuesta.
            </summary>
            <param name="message">Mensaje que se muestra en consola al usuario</param>
            <returns></returns>
        </member>
        <member name="T:Library.IFormatoSalida">
            <summary>
            Interfaz para implementar una forma de mostrar un string en pantalla. Al ser una interfaz, se busca
            que se cumpla el principio OCP a través del principio LSP. Se pueden extender las capacidades del
            programa sin modificarlo (por ejemplo agregando otras API), al agregar clases que implementen la 
            interfaz y sustituyendo en el programa principal.
            </summary>
        </member>
        <member name="M:Library.IFormatoSalida.PrintLine(System.String)">
            <summary>
            Método para las clases que implementen esta interfaz. Muestra en pantalla el string pasado
            como parámetro.
            </summary>
            <param name="line">Lo que se muestra en consola</param>
            <returns></returns>
        </member>
        <member name="T:Library.Traductor">
            <summary>
            Clase encargada de modelar un string para ser mostrado en pantalla. Implementa la interfaz
            IFormatoSalida ya que es una de las clases que muestra información en pantalla. 
            Al implementar una interfaz, es posible extender los usos sin modificar el programa principal ya que
            depende de una abstracción (patrón Polymorphism).
            </summary>
        </member>
        <member name="M:Library.Traductor.PrintLine(System.String)">
            <summary>
            Método encargado de modelar el string pasado como parámetro. Luego, lo muestra en pantalla.
            </summary>
            <param name="line">Lo que se modela para mostrar en pantalla</param>
            <returns></returns>
        </member>
        <member name="T:Library.BuscarPublicacionHandler">
            <summary>
            Este handler te dirrecciona a la clase BuscarPublicación, implementa AbstractHandler porque 
            interactúa con el usuario.
            </summary>
        </member>
        <member name="F:Library.BuscarPublicacionHandler.result">
            <summary>
            Atributo donde se guarda el resultado.
            </summary>
        </member>
        <member name="M:Library.BuscarPublicacionHandler.Handle(Library.Mensaje)">
            <summary>
            Método para buscar en la lista de publicaciones.
            </summary>
            <param name="mensaje">Mensaje recibido como parámetro. Contiene Id y el texto a evaluar.</param>
        </member>
        <member name="T:Library.ComienzoHandler">
            <summary>
            Primer Handler de la Chain of Responsibility. Implementa AbstractHandler porque interactúa
            con el usuario.
            </summary>
        </member>
        <member name="M:Library.ComienzoHandler.Handle(Library.Mensaje)">
            <summary>
            Método que verifica el mensaje. Actúa si el mensaje es "/start" y sino lo envía
            al siguiente Handler.
            </summary>
            <param name="mensaje">Mensaje recibido como parámetro. Contiene Id y el texto a evaluar.</param>
        </member>
        <member name="T:Library.ComprarHandler">
            <summary>
            Primer Handler de la Chain of Responsibility. Implementa AbstractHandler porque interactúa
            con el usuario.
            </summary>
        </member>
        <member name="M:Library.ComprarHandler.Handle(Library.Mensaje)">
            <summary>
            Método que verifica el mensaje. Actúa si el mensaje es "/start" y sino lo envía
            al siguiente Handler.
            </summary>
            <param name="mensaje">Mensaje recibido como parámetro. Contiene Id y el texto a evaluar.</param>
        </member>
        <member name="T:Library.CrearEmprendedorHandler">
            <summary>
            Handler encargado de crear un emprendedor. Implementa AbstractHandler porque interactúa con el
            usuario.
            </summary>
        </member>
        <member name="M:Library.CrearEmprendedorHandler.Handle(Library.Mensaje)">
            <summary>
            Método encargado de crear un emprendedor. El mismo interactúa con el usuario para que le
            dé los datos para crear un emprendedor. Colabora con la clase Emprendedor.
            </summary>
            <param name="mensaje">Indica que se quiere crear un emprendedor</param>
        </member>
        <member name="T:Library.CrearPublicacionHandler">
            <summary>
            Handler para crear una publicación. Implementa AbstractHandler porque interactúa
            con el usuario.
            </summary>
        </member>
        <member name="M:Library.CrearPublicacionHandler.Handle(Library.Mensaje)">
            <summary>
            Método que interpreta el mensaje. Si el mensaje es "/CrearPublicación", el método pide los
            datos de materiales y llama a la clase CrearMaterial para cumplir con el SRP. Luego, se
            llama a la clase CrearPublicacion por la misma razón.
            </summary>
            <param name="mensaje">Mensaje recibido como parámetro. Contiene Id y el texto a evaluar.</param>
        </member>
        <member name="T:Library.CrearUsuarioHandler">
            <summary>
            Handler encargado de crear un usuario. Implementa AbstractHandler porque interactúa con
            el usuario. Único Handler que tiene dos atributos Next, se envía el mensaje a uno de ellos
            en base a si el usuario está previamente registrado. Esto es para que no se saltee la verificación
            de usuario. De no ser por ambos Next, se podrían duplicar los usuarios.
            </summary>
        </member>
        <member name="F:Library.CrearUsuarioHandler.Next2">
            <summary>
            Atributo del segundo Next.
            </summary>
        </member>
        <member name="M:Library.CrearUsuarioHandler.#ctor(Library.AbstractHandler,Library.IHandler)">
            <summary>
            Constructor de la clase.
            </summary>
            <param name="next">Handler de la subcadena</param>
            <param name="next2">Handler siguiente en la cadena principal</param>
        </member>
        <member name="M:Library.CrearUsuarioHandler.Handle(Library.Mensaje)">
            <summary>
            Método que interpreta el mensaje. Si el mensaje es "/CrearUsuario", el método se encarga de 
            verificar que la Id no esté previamente registrada. En caso de que no lo esté, se envía el 
            mensaje a uno de los siguientes Handlers. 
            Si el mensaje es diferente a "/CrearUsuario", se manda el mensaje a otro Handler.
            </summary>
            <param name="mensaje">Mensaje recibido como parámetro. Contiene Id y el texto a evaluar.</param>
        </member>
        <member name="T:Library.EmpresaCantidadTrabajadores">
            <summary>
            Handler que muestra la cantidad de trabajadores que hay en una empresa. Implementa IHandler
            porque no interactúa con el usuario, solo muestra en pantalla.
            </summary>
        </member>
        <member name="P:Library.EmpresaCantidadTrabajadores.Next">
            <summary>
            Siguiente Handler en la cadena.
            </summary>
            <value></value>
        </member>
        <member name="M:Library.EmpresaCantidadTrabajadores.Handle(Library.Mensaje)">
            <summary>
            Método que evalúa el mensaje. Busca la empresa y muestra la cantidad de trabajadores que tiene.
            </summary>
            <param name="mensaje">Contiene el Id con el que se encuentra la empresa deseada.</param>
        </member>
        <member name="T:Library.FinalizarHandler">
            <summary>
            Handler final, para salir de la ejecución del bot. Implementa AbstractHandler porque
            interactúa con el usuario.
            </summary>
        </member>
        <member name="M:Library.FinalizarHandler.Handle(Library.Mensaje)">
            <summary>
            Método que muestra en pantalla un mensaje, último Handler de la cadena principal.
            </summary>
            <param name="mensaje">El mensaje contiene el comando para finaliar.</param>
        </member>
        <member name="T:Library.HistorialHandler">
            <summary>
            Handler para verificar el historial de un usuario. Implementa AbstractHandler porque
            interactúa con el usuario.
            </summary>
        </member>
        <member name="F:Library.HistorialHandler.resultado">
            <summary>
            Atributo donde se guarda el resultado.
            </summary>
        </member>
        <member name="M:Library.HistorialHandler.Handle(Library.Mensaje)">
            <summary>
            Método que evalúa el mensaje. Si el mensaje es "/historial", el Handler le pide el nombre 
            al usuario y devuelve el historial de compras/ventas con ese nombre. Si el mensaje es otro,
            se envía al siguiente Handler.
            </summary>
            <param name="mensaje">Indica que se quiere ver el historial</param>
        </member>
        <member name="T:Library.InvitarHandler">
            <summary>
            Handler para crear una invitacion. Implementa AbstractHandler porque la interacción es
            con el usuario.
            </summary>
        </member>
        <member name="F:Library.InvitarHandler.nombre">
            <summary>
            Nombre de la emrpesa.
            </summary>
        </member>
        <member name="F:Library.InvitarHandler.ubicacion">
            <summary>
            Ubicación de la empresa.
            </summary>
        </member>
        <member name="F:Library.InvitarHandler.rubro">
            <summary>
            Rubro de la empresa.
            </summary>
        </member>
        <member name="F:Library.InvitarHandler.token">
            <summary>
            Token de invitación.
            </summary>
        </member>
        <member name="M:Library.InvitarHandler.Handle(Library.Mensaje)">
            <summary>
            Método para invitar a un usuario. Pide el nombre de un usuario y crea una invitación 
            para el mismo?
            </summary>
            <param name="mensaje">Indica que se quiere crear una invitación</param>
        </member>
        <member name="T:Library.RegistrarEmpresarioHandler">
            <summary>
            Handler para registrar un empresario en una empresa. Implementa AbstractHandler
            porque interactúa con el usuario.
            </summary>
        </member>
        <member name="F:Library.RegistrarEmpresarioHandler.token">
            <summary>
            Token para verificar que es válida la invitación.
            </summary>
        </member>
        <member name="M:Library.RegistrarEmpresarioHandler.Handle(Library.Mensaje)">
            <summary>
            Método encargado de verificar si la invitación es válida. En caso de que lo sea y el 
            empresario no esté registrado, lo registra. En caso contrario, le avisa al usuario que no
            es una invitación válida.S
            </summary>
            <param name="mensaje">Indica que se quiere registrar un empresario</param>
        </member>
        <member name="T:Library.AbstractHandler">
            <summary>
            Una clase que implementa un metodo para recorrer los distintos handler existentes en busca de un comando escrito por el usuario.
            Como depende de la interfaz IHandler también usa Chain of Resposibility para que los handlers que usen AbstractHandler permitan que se recorran otros handlers.
            También usa singleton porque todos los handlers consultan esta clase para recorrer los handlers.
            </summary>
        </member>
        <member name="P:Library.AbstractHandler.Next">
            <summary>
            Las clases que apliquen AbstractHandler pueden tambien pasar el Next para que se recorran el resto de los handlers.
            </summary>
            <value></value>
        </member>
        <member name="F:Library.AbstractHandler.Input">
            <summary>
            Recibe una cadena, siempre en formato string.
            </summary>
        </member>
        <member name="F:Library.AbstractHandler.Output">
            <summary>
            Se envia la cadena recibida tal como está o con algun tipo de cambio implicito o explicito.
            </summary>
        </member>
        <member name="M:Library.AbstractHandler.Handle(Library.Mensaje)">
            <summary>
            El metodo se fija si no hay ningun comando apuntando al handler. si no hay se pasa al siguiente.
            </summary>
            <param name="mensaje">El emensaje escrito por el usuario.</param>
        </member>
        <member name="T:Library.IHandler">
            <summary>
            Interfaz para la creación de los handlers.
            Dada la naturaleza de los handlers se usa el patrón Chain of responsibility, asi se puede recorren todos los handlers hasta que se encuentre el que se necesita.
            </summary>
        </member>
        <member name="P:Library.IHandler.Next">
            <summary>
            Las clases que apliquen IHandler pueden tambien pasar el Next para que se recorran el resto de los handlers.
            </summary>
            <value></value>
        </member>
        <member name="M:Library.IHandler.Handle(Library.Mensaje)">
            <summary>
            Todos los handlers deben tener un metodo para pasar al siguiente si no existe un comando que actualmente no esté apuntando.
            </summary>
            <param name="mensaje">Mensaje escrito por usuario</param>
        </member>
        <member name="T:Library.Mensaje">
            <summary>
            Clase para usar en otras clases que requieran el envio y la recepción de mensajes.
            Es una clase con patron Mediator ya que los mensajes generados están restringidos a un formato especifico.
            </summary>
        </member>
        <member name="P:Library.Mensaje.Id">
            <summary>
            Se guarda una Id en forma de un entero.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Mensaje.Text">
            <summary>
            String que guarda un mensaje en forma de texto.
            </summary>
            <value></value>
        </member>
        <member name="M:Library.Mensaje.#ctor(System.Int32,System.String)">
            <summary>
            El metodo permite crear un mensaje con una cierta Id y un cierto mensaje.
            </summary>
            <param name="id">Id del usuario que escribe el mensaje</param>
            <param name="text">Lo que escribe el usuario</param>
        </member>
        <member name="T:Library.Singleton`1">
            <summary>
            Se usa en los handlers que requieren la utilización del patrón singleton, tales como AbstractHandler y UsuarioInterfaz.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Library.Singleton`1.Instance">
            <summary>
            Se crea una nueva instancia solo si no existe previamente.
            </summary>
            <value></value>
        </member>
        <member name="T:Library.IJsonConvertible">
            <summary>
            Define el tipo que tienen los objetos que pueder ser serializados en y deserializados desde texto en formato
            Json.
            </summary>
        </member>
        <member name="M:Library.IJsonConvertible.ConvertToJson">
            <summary>
            Convirte el objeto a texto en formato Json. El objeto puede ser reconstruido a partir del texto en formato
            Json utilizando <see cref="M:Library.IJsonConvertible.LoadFromJson(System.String)"/>.
            </summary>
            <returns>El objeto convertido a texto en formato Json.</returns>
        </member>
        <member name="M:Library.IJsonConvertible.LoadFromJson(System.String)">
            <summary>
            Asigna las propiedades del objeto a partir de texto en formato Json. El texto en formato Json puede ser
            obtenido utilizando <see cref="M:Library.IJsonConvertible.ConvertToJson"/>.
            </summary>
            <param name="json">El texto en formato Json a partir del cual asignas las propiedades del objeto.</param>
        </member>
        <member name="T:Library.IUbicacion">
            <summary>
            Interfaz que modela una ubicación.
            Creada por DIP. Las clases que necesitan trabajar con una o varias ubicaciones ahora dependen de esta abstracción y no de una clase concreta(como podría ser la clase Location
            en LocationApi).
            </summary>
        </member>
        <member name="P:Library.IUbicacion.Pais">
            <summary>
            Pais en el que se encuentra la ubicación.
            </summary>
            <value>string</value>
        </member>
        <member name="P:Library.IUbicacion.Ciudad">
            <summary>
            Ciudad en la que se encuentra la ubicación.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.IUbicacion.Direccion">
            <summary>
            Direccion de la ubicación.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.IUbicacion.CodigoPostal">
            <summary>
            Codigo postal de la ubicación.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.IUbicacion.Latitud">
            <summary>
            Latitud de las coordenadas de la ubicación.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.IUbicacion.Longitud">
            <summary>
            Longitud de las coordenadas de la ubicación
            </summary>
            <value></value>
        </member>
        <member name="T:Library.IUbicacionProvider">
            <summary>
            Interfaz que modela las clases que obtienen ubicaciones a partir de direcciones. 
            Creada por DIP, las clases que necesiten obtener una ubicacion dependerán de esta abstracción y no de una clase concreta.
            </summary>
        </member>
        <member name="M:Library.IUbicacionProvider.GetUbicacion(System.String)">
            <summary>
            Método para obtener la ubicación de tipo IUbicacion a partir de una dirección en string.
            </summary>
            <param name="ubicacion">Dirección de la que se desea obtener la ubicación.</param>
            <returns></returns>
        </member>
        <member name="T:Library.IUsuario">
            <summary>
             Interfaz que contiene los datos utilizados por empresas y emprendedores.
             Al ser una interfaz, se busca (a través del principio LSP) tener un programa que cumpla con el
             principio OCP. Esto se logra al tener clases que implementen la interfaz, permitiendo extender
             las capacidades del programa sin modificarlo. Se extienden al agregar otras clases que implementen
             la interfaz y sustituyendo en el programa principal.
            </summary>
        </member>
        <member name="P:Library.IUsuario.Nombre">
            <summary>
            Nombre de la empresa o emprendedor.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.IUsuario.Rubro">
            <summary>
            Rubro de la empresa o emprendedor.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.IUsuario.Ubicacion">
            <summary>
            Ubicación de la empresa o emprendedor.
            </summary>
            <value></value>
        </member>
        <member name="T:Library.ListaAdministradores">
            <summary>
            ListaAdministradores es quien se encarga de tener la lista con todos los 
            Administradores registrados. 
            Se cumple principio SRP ya que libra al administrador de tener que crearse a él mismo 
            y al mismo tiempo conocer todos los Administradores registrados. 
            </summary>
        </member>
        <member name="M:Library.ListaAdministradores.ConvertToJson">
            <summary>
            El CovertToJson es el método por el cual se guardan los datos dentro de un archivo
            json.
            </summary>
            <returns></returns>    
        </member>
        <member name="M:Library.ListaAdministradores.LoadFromJson(System.String)">
            <summary>
            LoadFromJson se encarga de cargar los datos guardados creando los objetos 
            a partir de el archivo json. 
            </summary>
            <param name="json"></param>
        </member>
        <member name="F:Library.ListaAdministradores.Administradores">
            <summary>
            Lista que contiene todos los administradores registrados.
            Utiliza el patrón de diseño Singleton para que el atributo sea único y global.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.ListaAdministradores.Add(Library.Administrador)">
            <summary>
            Se crea el método Add para añadir un Administrador a la ListaAdministradores
            ya existente. 
            Se pone en esta clase para cumplir el patrón Expert ya que es la que conoce
            a todos los Administradores.
            </summary>
            <param name="administrador"></param>
        </member>
        <member name="T:Library.ListaConversaciones">
            <summary>
            ListaConversaciones es quien se encarga de tener la lista con todos los 
            mensajes enviados.
            Cumple con el principio SRP ya que cada objeto de la lista tiene los mensajes
            entre un usuario y el bot, y la lista contiene todas las conversaciones
            los usuarios y el bot.
            </summary>
        </member>
        <member name="M:Library.ListaConversaciones.ConvertToJson">
            <summary>
            El CovertToJson es el método por el cual se guardan los datos dentro de un archivo
            json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.ListaConversaciones.LoadFromJson(System.String)">
            <summary>
            LoadFromJson se encarga de cargar los datos guardados creando los objetos 
            a partir de el archivo json. 
            </summary>
            <param name="json"></param>
        </member>
        <member name="F:Library.ListaConversaciones.Conversaciones">
            <summary>
            Lista que contiene las conversaciones entre todos los usuarios y el bot.
            Utiliza el patrón de diseño Singleton para que el atributo sea único y global.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.ListaConversaciones.Add(Library.Conversacion)">
            <summary>
            Se crea el método Add para añadir una Conversación a la ListaConversaciones
            ya existente. 
            Se pone en esta clase para cumplir el patrón Expert ya que es la que conoce
            todas las conversaciones.
            </summary>
            <param name="conversacion"></param>
        </member>
        <member name="T:Library.ListaDeUsuario">
            <summary>
            ListaDeUsuario es quien se encarga de tener la lista con todos los 
            usuarios registrados, siendo los usuarios las empresas y emprendedores.  
            Se implementa esta lista con un tipo genérico para expandir los usos en otras clases.
            </summary>
        </member>
        <member name="F:Library.ListaDeUsuario.IdUsuarios">
            <summary>
            Lista que contiene a todos los ususarios.
            Utiliza el patrón de diseño Singleton para que el atributo sea único y global.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.ListaDeUsuario.ConvertToJson">
            <summary>
            El CovertToJson es el método por el cual se guardan los datos dentro de un archivo
            json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.ListaDeUsuario.LoadFromJson(System.String)">
            <summary>
            LoadFromJson se encarga de cargar los datos guardados creando los objetos 
            a partir de el archivo json. 
            </summary>
            <param name="json"></param>
        </member>
        <member name="M:Library.ListaDeUsuario.Add(System.Int32)">
            <summary>
            Se crea el método Add para añadir un IdUsuario a la ListaDeUsuario
            ya existente. 
            Se pone en esta clase para cumplir el patrón Expert ya que es la que conoce
            los id de todos los usuarios.
            </summary>
            <param name="Id"></param>
        </member>
        <member name="T:Library.ListaEmprendedores">
            <summary>
            Clase la cual contiene una lista en la cual estaran todos los emprendedores. 
            Cumple con el principio SRP ya que su única responsabilidad es conocer los 
            emprendedores.
            </summary>
        </member>
        <member name="M:Library.ListaEmprendedores.ConvertToJson">
            <summary>
            El CovertToJson es el método por el cual se guardan los datos dentro de un archivo
            json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.ListaEmprendedores.LoadFromJson(System.String)">
            <summary>
            LoadFromJson se encarga de cargar los datos guardados creando los objetos 
            a partir de el archivo json. 
            </summary>
            <param name="json"></param>
        </member>
        <member name="F:Library.ListaEmprendedores.Emprendedores">
            <summary>
            Lista que contiene todos los emprendedores registrados.
            Utiliza el patrón de diseño Singleton para que el atributo sea único y global.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.ListaEmprendedores.Add(Library.Emprendedor)">
            <summary>
            Se crea el método Add para añadir un Emprendedor a la ListaEmprendedores
            ya existente. 
            Se pone en esta clase para cumplir el patrón Expert ya que es la que conoce
            a todos los Emprendedores.
            </summary>
            <param name="emprendedor"></param>
        </member>
        <member name="T:Library.ListaEmpresa">
            <summary>
            Clase que contiene una lista en la cual están todas las empresas. 
            Cumple con el principio SRP ya que su única responsabilidad es conocer los empresas.
            </summary>
        </member>
        <member name="F:Library.ListaEmpresa.Empresas">
            <summary>
            Lista que contiene todas las empresas registradas.
            Utiliza el patrón de diseño Singleton para que el atributo sea único y global.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.ListaEmpresa.Buscar(System.Int32)">
            <summary>
            Método Buscar, recorre la lista de empresas y retorna la empresa deseada.
            </summary>
            <param name="id">id de la empresa deseada</param>
            <returns></returns>
        </member>
        <member name="M:Library.ListaEmpresa.Add(Library.Empresa)">
            <summary>
            Se crea el método Add para añadir una Empresa a la ListaEmpresa ya existente. 
            Se pone en esta clase para cumplir el patrón Expert ya que es la que conoce
            a todas las Empresas.
            </summary>
            <param name="empresa"></param>
        </member>
        <member name="M:Library.ListaEmpresa.ConvertToJson">
            <summary>
            El CovertToJson es el método por el cual se guardan los datos dentro de un archivo
            json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.ListaEmpresa.LoadFromJson(System.String)">
            <summary>
            LoadFromJson se encarga de cargar los datos guardados creando los objetos 
            a partir de el archivo json. 
            </summary>
            <param name="json"></param>
        </member>
        <member name="T:Library.ListaInvitaciones">
            <summary>
            ListaInvitaciones es quien se encarga de tener la lista con todas las 
            invitaciones que fueron hechas. 
            Se cumple principio SRP ya que libra al administrador de conocer todas las
            invitaciones.
            </summary>
        </member>
        <member name="F:Library.ListaInvitaciones.Invitaciones">
            <summary>
            Lista que contiene todas las invtiaciones.
            Utiliza el patrón de diseño Singleton para que el atributo sea único y global.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.ListaInvitaciones.ConvertToJson">
            <summary>
            El CovertToJson es el método por el cual se guardan los datos dentro de un archivo
            json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.ListaInvitaciones.LoadFromJson(System.String)">
            <summary>
            LoadFromJson se encarga de cargar los datos guardados creando los objetos 
            a partir de el archivo json. 
            </summary>
            <param name="json"></param>
        </member>
        <member name="M:Library.ListaInvitaciones.Add(System.String)">
            <summary>
            Se crea el método Add para añadir las Invitaciones a la ListaInvitaciones
            ya existente. 
            Se pone en esta clase para cumplir el patrón Expert ya que es la que conoce
            todas las invitaciones que existen.
            </summary>
            <param name="Invitacion"></param>
        </member>
        <member name="T:Library.ListaTransacciones">
            <summary>
            Clase que se encarga de conocer todas las transacciones que se realizan 
            de una empresa a un emprendedor o viceversa. 
            </summary>
        </member>
        <member name="F:Library.ListaTransacciones.Transacciones">
            <summary>
            Transacciones es quien tiene la lista con los objetos de la clase Transaccion.
            Utiliza el patrón de diseño Singleton para que el atributo sea único y global.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.ListaTransacciones.Add(Library.Transaccion)">
            <summary>
            Se crea el método Add para añadir una Transaccion a la ListaTransacciones
            ya existente. 
            Se pone en esta clase para cumplir el patrón Expert ya que es la que conoce
            todas las transacciones que se realizan.
            </summary>
            <param name="transaccion"></param>
        </member>
        <member name="M:Library.ListaTransacciones.ConvertToJson">
            <summary>
            El CovertToJson es el método por el cual se guardan los datos dentro de un archivo
            json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.ListaTransacciones.LoadFromJson(System.String)">
            <summary>
            LoadFromJson se encarga de cargar los datos guardados creando los objetos 
            a partir de el archivo json. 
            </summary>
            <param name="json"></param>
        </member>
        <member name="T:Library.RegistroPublicaciones">
            <summary>
            Clase que tiene un registro de las publicaciones activas, eliminadas y pausadas. Tiene la responsabilidad de conocer el estados de las publicaciones.
            Se definen los métodos para encapsular la clase y poder modificar los datos
            sin tener que compartir la información de las listas, cumpliendo con el
            patrón Expert.
            </summary>
        </member>
        <member name="P:Library.RegistroPublicaciones.Activas">
            <summary>
            Lista con las publicaciones activas.
            Utiliza el patrón de diseño Singleton para que el atributo sea único y global.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Library.RegistroPublicaciones.Eliminadas">
            <summary>
            Lista con las publicaciones que fueron eliminadas.
            Utiliza el patrón de diseño Singleton para que el atributo sea único y global.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Library.RegistroPublicaciones.Pausadas">
            <summary>
            Lista con las publicaciones pausadas.
            Utiliza el patrón de diseño Singleton para que el atributo sea único y global.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.RegistroPublicaciones.Add(Library.Publicacion)">
            <summary>
            Método para agregar una nueva publicación a la lista de 
            publicaciones activas.
            </summary>
            <param name="publi">Publicación a añadir</param>
        </member>
        <member name="M:Library.RegistroPublicaciones.PausarPublicacion(Library.Publicacion)">
            <summary>
            Método para pausar una publicación. Agrega dicha publicación a
            la lista de publicaciones pausadas y la remueve de la lista de 
            publicaciones activas.
            </summary>
            <param name="publi">Publicación a pausar</param>
        </member>
        <member name="M:Library.RegistroPublicaciones.EliminarPublicacion(Library.Publicacion)">
            <summary>
            Método para eliminar una publicación. Se agrega la misma a la lista de
            publicaciones eliminadas y se remueve de la lista de publicaciones activas
            y publicaciones pausadas.
            </summary>
            <param name="publi">Publicación a eliminar</param>
        </member>
        <member name="M:Library.RegistroPublicaciones.ConvertToJson">
            <summary>
            El CovertToJson es el método por el cual se guardan los datos dentro de un archivo
            json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.RegistroPublicaciones.LoadFromJson(System.String)">
            <summary>
            LoadFromJson se encarga de cargar los datos guardados creando los objetos 
            a partir de el archivo json. 
            </summary>
            <param name="json"></param>
        </member>
    </members>
</doc>
