<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TelegramBot</name>
    </assembly>
    <members>
        <member name="T:Library.Administrador">
            <summary>
            Clase que modela el rol de administrador.
            Es el encargado de generar las invitaciones para las empresas.
            </summary>
        </member>
        <member name="M:Library.Administrador.#ctor(System.Int32,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Administrador"/>.
            Constructor de la clase Administrador.
            </summary>
            <param name="id">El id con el cual se registra un administrador.</param>
            <param name="nombre">El  con el cual se registra un administrador.</param>
        </member>
        <member name="P:Library.Administrador.Id">
            <summary>
            Obtiene o establece se guarda el id de el administrador al registrarse.
            </summary>
            <value>Id del administrador.</value>
        </member>
        <member name="P:Library.Administrador.Nombre">
            <summary>
            Obtiene o establece guarda el nombre que pone el administrador al registrarse.
            </summary>
            <value>Nombre del administrador.</value>
        </member>
        <member name="M:Library.Administrador.CrearInvitacion(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Método que crea el objeto empresa y su token de invitación.
            </summary>
            <param name="nombre">Nombre de la empresa.</param>
            <param name="ubicacion">Ubicación de la empresa.</param>
            <param name="rubro">Rubro de la empresa.</param>
            <param name="token">Token de invitación creada por el administrador.</param>
            <param name="contacto">Un telefono para contactactar a la empresa.</param>
        </member>
        <member name="T:Library.BuscarEmpresaPorPublicacion">
            <summary>
            Clase que sirve para buscar empresas. Cumple con SRP, ya que hay una clase encargada de
            conocer todas las empresas que no tiene la responsabilidad de buscarlas.
            </summary>
        </member>
        <member name="M:Library.BuscarEmpresaPorPublicacion.Buscar(System.String)">
            <summary>
            Método para buscar una empresa a partir de una publicación.
            </summary>
            <param name="nombrePublicacion">Se pasa el nombre de la publicación para buscar la empresa.</param>
            <returns>Devuelve la empresa que hizo la publicacion.</returns>
        </member>
        <member name="T:Library.BuscarPublicacion">
            <summary>
            Pregunta por el tipo de búsqueda, pide a la clase correspondiente que la realice y
            devuelve una lista con las coincidencias.
            Además, se deberá preguntar por los parámetros necesarios para la búsqueda.
            En caso de una búsqueda por más de un tipo, se realizan todas las búsquedas y,
            devuelve las coincidencias comunes a todas las búsquedas.
            Esta clase además cumple con el principio SRP, ya que tiene como responsabilidad
            devolver una lista de publicaciones que cumplen con lo buscado, pero delega
            la responsabilidad de buscar a otras clases.
            </summary>
        </member>
        <member name="F:Library.BuscarPublicacion.TipoBusqueda">
            <summary>
            Contiene el tipo de búsqueda que se va a realizar.
            </summary>
        </member>
        <member name="F:Library.BuscarPublicacion.Busqueda">
            <summary>
            Lo que se desea buscar.
            </summary>
        </member>
        <member name="F:Library.BuscarPublicacion.Result">
            <summary>
            Lista de coincidencias de la búsqueda.
            </summary>
        </member>
        <member name="M:Library.BuscarPublicacion.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Library.BuscarPublicacion"/> class.
            Constructor de la clase.
            </summary>
            <param name="tipobusqueda"></param>
            <param name="busqueda"></param>
        </member>
        <member name="M:Library.BuscarPublicacion.EjecutarComando">
            <summary>
            EjecutarComando se encarga de decidir qué tipo de búsqueda se va a realizar(categoría, zona y,
            palabras claves). Luego las delega a cada una de las clases que se encargan de,
            búsqueda, para cumplir con SRP.
            Finalmente, devuelve una lista con todas la publicaciones encontradas, de la búsqueda
            que se realizó.
            </summary>
            <returns>Lista con las publicaciones encontradas.</returns>
        </member>
        <member name="T:Library.BusquedaCategoria">
            <summary>
            Busqueda por categoría. Recorre la lista de todas las publicaciones y devuelve una lista con las coincidencias
            en categoría.
            Se decide crear esta clase para cumplir SRP ya que, esta se encarga solo de realizar la búsqueda por categoría.
            Esta clase colabora con BuscarPublicacionHandler y BuscarPublicacion.
            </summary>
        </member>
        <member name="M:Library.BusquedaCategoria.Buscar(System.String)">
            <summary>
            Toma como parámetro una categoría y recorre la lista de publicaciones buscando coincidencias.
            </summary>
            <param name="categoria">Categoria del material que se quiere buscar.</param>
            <returns>Lista de coincidencias.</returns>
        </member>
        <member name="T:Library.BusquedaKeyWord">
            <summary>
            Busqueda por palabras clave. Recorre la lista de todas las publicaciones y devuelve una lista con las coincidencias
            en palabras clave.
            Se decide crear esta clase para cumplir SRP ya que, esta se encarga solo de realizar la búsqueda por Palabras clave.
            Esta clase colabora con BuscarPublicacionHandler y BuscarPublicacion.
            </summary>
        </member>
        <member name="M:Library.BusquedaKeyWord.Buscar(System.String)">
            <summary>
            Busqueda por palabras clave. Recorre la lista de todas las publicaciones y devuelve una lista con las coincidencias.
            </summary>
            <param name="palabras">Palabra clave que ayuda a la busqueda.</param>
            <returns>Devuelve las publicaciones que cumplen con la búsqueda.</returns>
        </member>
        <member name="T:Library.BusquedaZonaCiudad">
            <summary>
            Busqueda por zona. Recorre la lista de todas las publicaciones y devuelve una lista con las coincidencias en zona.
            Se decide crear esta clase para cumplir SRP ya que, esta se encarga solo de realizar la búsqueda por zona.
            Esta clase colabora con BuscarPublicacionHandler y BuscarPublicacion.
            </summary>
        </member>
        <member name="M:Library.BusquedaZonaCiudad.Buscar(System.String,System.String)">
            <summary>
            Busqueda por zona. Recorre la lista de todas las publicaciones y devuelve una lista con las coincidencias.
            </summary>
            <param name="tipoZona">Tipo de zona en que se desea buscar(Ciudad, Departamento, etc).</param>
            <param name="ubicacion">Nombre de la zona.</param>
            <returns>Devuelve la lista con publicaciones que cumplen con la búsqueda.</returns>
        </member>
        <member name="T:Library.Emprendedor">
            <summary>
            Clase que modela un usario del tipo emprendedor.
            Implementa la interfaz IUsuario, para lograr facilitar la extensión en caso de que
            surjan nuevos tipos de usuario.
            </summary>
        </member>
        <member name="M:Library.Emprendedor.#ctor(System.Int64,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Emprendedor"/>.
            Constructor de la clase emprendedor.
            </summary>
            <param name="id">Id del emprendedor.</param>
            <param name="nombre">Nombre del emprendedor.</param>
            <param name="ubicacion">Ubicación del emprendedor.</param>
            <param name="rubro">Rubro del emprendedor.</param>
            <param name="habilitaciones">Habilitaciones que tiene el emprendedor.</param>
            <param name="especializaciones">Especializaciones que tiene el emprendedor.</param>
        </member>
        <member name="P:Library.Emprendedor.Id">
            <summary>
            Obtiene o establece id del Emprendedor.
            </summary>
            <value>Se guarda el Id de el usuario.</value>
        </member>
        <member name="P:Library.Emprendedor.Estado">
            <summary>
            Obtiene o establece atributo para ver el estado en el que se encuentra este usuario dentro de los handlers.
            </summary>
            <value>Se guarda el Estado de la conversación del usuario.</value>
        </member>
        <member name="P:Library.Emprendedor.Nombre">
            <summary>
            Obtiene o establece nombre del emprendedor.
            </summary>
            <value>Se guarda el nombre del emprendedor.</value>
        </member>
        <member name="P:Library.Emprendedor.Ubicacion">
            <summary>
            Obtiene o establece ubicación del emprendedor.
            </summary>
            <value>Se guarda la dirección del emprendedor.</value>
        </member>
        <member name="P:Library.Emprendedor.Rubro">
            <summary>
            Obtiene o establece rubro del emprendedor.
            </summary>
            <value>Se guarda el rubro del emprendedor.</value>
        </member>
        <member name="P:Library.Emprendedor.Habilitaciones">
            <summary>
            Obtiene habilitaciones del emprendedor(Link al documento).
            </summary>
            <value>Se guarda las habilitaciones que contiene el emprendedor.</value>
        </member>
        <member name="P:Library.Emprendedor.Especializaciones">
            <summary>
            Obtiene especializaciones del emprendedor.
            </summary>
            <value>Se guardan las especializaciones del emprendedor.</value>
        </member>
        <member name="M:Library.Emprendedor.ConvertToString">
            <summary>
            Método que crea un string con toda la información del emprendedor.
            </summary>
            <returns>Devuelve el string con la información del emprendedor.</returns>
        </member>
        <member name="T:Library.Empresa">
            <summary>
            Clase que modela un usario del tipo empresa.
            Implementa la interfaz IUsuario, para lograr facilitar la extensión en caso de que
            surjan nuevos tipos de usuario.
            </summary>
        </member>
        <member name="M:Library.Empresa.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Empresa"/>.
            Es el constructor que se encarga de crear a la empresa en su totalidad.
            </summary>
            <param name="nombre">Se encarga de guardar el nombre de la empresa dentro del objeto empresa.</param>
            <param name="ubicacion">Se encarga de guardar la ubicación de la empresa dentro del objeto empresa.</param>
            <param name="rubro">Se encarga de guardar el rubro de la empresa dentro del objeto empresa.</param>
            <param name="invitacion">Se encarga de guardar la invitación de la empresa dentro del objeto empresa.</param>
        </member>
        <member name="F:Library.Empresa.ListaEmpresarios">
            <summary>
            La ListaEmpresarios se encarga de registrar todos los usuarios que
            puede tener una misma empresa.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Empresa.Contacto">
            <summary>
            Obtiene o establece el contacto de la empresa.
            </summary>
            <value>Guarda el contacto en tipo string, la idea es que sea un mail o numero de teléfono</value>
        </member>
        <member name="P:Library.Empresa.Invitacion">
            <summary>
            Obtiene o establece la invitación de la empresa.
            </summary>
            <value>Guarda la invitación que la empresa le brinda a los empresarios para unirse.</value>
        </member>
        <member name="P:Library.Empresa.Nombre">
            <summary>
            Obtiene o establece guarda el nombre de la empresa.
            </summary>
            <value>Guarda el nombre de la empresa.</value>
        </member>
        <member name="P:Library.Empresa.Ubicacion">
            <summary>
            Obtiene o establece guarda la ubicación de la empresa.
            </summary>
            <value>Guarda la ubicación de la empresa.</value>
        </member>
        <member name="P:Library.Empresa.Rubro">
            <summary>
            Obtiene o establece guarda el rubro de la empresa.
            </summary>
            <value>Guarda el rubro de la empresa.</value>
        </member>
        <member name="M:Library.Empresa.ConvertToString">
            <summary>
            Método que crea un string con la información de la empresa.
            </summary>
            <returns>Devuelve el string con la información de la empresa.</returns>
        </member>
        <member name="T:Library.Empresario">
            <summary>
            Clase que modela un empresario perteneciente a una empresa.
            </summary>
        </member>
        <member name="M:Library.Empresario.#ctor(System.Int64,Library.EstadoUsuario,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Empresario"/>.
            Método constructor de la clase.
            </summary>
            <param name="id">Indica el Id del empresario.</param>
            <param name="estado">Indica el estado en el que se encuentra el empresario.</param>
            <param name="nombre">Indica el nombre que tiene el empresario.</param>
        </member>
        <member name="P:Library.Empresario.Id">
            <summary>
            Obtiene o establece id del usuario del empresario.
            </summary>
            <value>Guarda el id del empresario.</value>
        </member>
        <member name="P:Library.Empresario.Estado">
            <summary>
            Obtiene o establece el estado en el que se encuentra este usuario para los handlers.
            </summary>
            <value>Guarda el estado en el que se encuentra la conversasion con el usuario.</value>
        </member>
        <member name="P:Library.Empresario.Nombre">
            <summary>
            Obtiene o establece el nombre del empresario.
            </summary>
            <value>Guarda el nombre del empresario.</value>
        </member>
        <member name="T:Library.EstadoUsuario">
            <summary>
            Clase para conocer el estado del usuario. 
            </summary>
        </member>
        <member name="F:Library.EstadoUsuario.Handler">
            <summary>
            Atributo para saber en qué handler está el usuario.
            </summary>
        </member>
        <member name="F:Library.EstadoUsuario.Step">
            <summary>
            Cuenta los pasos del usuario.
            </summary>
        </member>
        <member name="M:Library.EstadoUsuario.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.EstadoUsuario"/>.
            Constructor del estado del usuario.
            </summary>
        </member>
        <member name="T:Library.Material">
            <summary>
            Esta clase se encarga del modelado del material.
            </summary>
        </member>
        <member name="P:Library.Material.PosiblesCategorias">
            <summary>
            Lista que contiene las categorías del material.
            </summary>
        </member>
        <member name="M:Library.Material.#ctor(System.String,System.Double,System.Double,System.String,System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Material"/>.
            </summary>
            <param name="nombre">El nombre del material.</param>
            <param name="costo">El costo del material.</param>
            <param name="cantidad">LA cantidad de material.</param>
            <param name="unidad">La unidad en la cual se cuantifica el material.</param>
            <param name="habilitaciones">Las habliitaciones que se necesitan para el material.</param>
            <param name="categoria">La categoría del material.</param>
        </member>
        <member name="P:Library.Material.Nombre">
            <summary>
            Obtiene o establece el nombre de el material.
            </summary>
            <value>Se guarda el nombre del material.</value>
        </member>
        <member name="P:Library.Material.Costo">
            <summary>
            Obtiene gets se encarga de guardar el costo del material dentro del objeto material.
            </summary>
            <value>Se guarda el valor del costo.</value>
        </member>
        <member name="P:Library.Material.Cantidad">
            <summary>
            Obtiene gets se encarga de guardar la cantidad que existe del mismo dentro del objeto material.
            </summary>
            <value>Guarda la cantidad del material.</value>
        </member>
        <member name="P:Library.Material.Unidad">
            <summary>
            Obtiene la unidad que se encarga de guardar la unidad en la cual se pesa el material dentro del objeto material.
            </summary>
            <value>Guarda la unidad de la cantidad del material.</value>
        </member>
        <member name="P:Library.Material.Habilitaciones">
            <summary>
            Obtiene se encarga de guardar las habliitaciones, que se necesitan para obtener el material, dentro del objeto material.
            Link al documento.
            </summary>
            <value>Guarda las habilitaciones para obtener el material.</value>
        </member>
        <member name="P:Library.Material.Categoria">
            <summary>
            Obtiene gets se encarga de guardar la categoría del material dentro del objeto material.
            </summary>
            <value>Guarda la categoria del material.</value>
        </member>
        <member name="M:Library.Material.ConvertToString">
            <summary>
            Método para crear un string con la información del material.
            </summary>
            <returns>String con la información del material.</returns>
        </member>
        <member name="T:Library.Mensaje">
            <summary>
            Clase para usar en otras clases que requieran el envio y la recepción de mensajes.
            Es una clase con patron Mediator ya que los mensajes generados están restringidos a un formato especifico.
            </summary>
        </member>
        <member name="M:Library.Mensaje.#ctor(System.Int64,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Mensaje"/>.
            El metodo permite crear un mensaje con una cierta Id y un cierto mensaje.
            </summary>
            <param name="id">Id del usuario que escribe el mensaje.</param>
            <param name="text">Lo que escribe el usuario.</param>
        </member>
        <member name="P:Library.Mensaje.Id">
            <summary>
            Se guarda una Id en forma de un entero.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Mensaje.Text">
            <summary>
            String que guarda un mensaje en forma de texto.
            </summary>
            <value></value>
        </member>
        <member name="T:Library.Publicacion">
            <summary>
            Clase que modela un usario del tipo publicación.
            </summary>
        </member>
        <member name="M:Library.Publicacion.#ctor(System.String,Library.Material,System.String,System.String,Library.IUbicacion,Library.Empresa)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Publicacion"/>.
            Constructor de la clase Publicacion.
            </summary>
            <param name="titulo">Título de la publicación.</param>
            <param name="material">Material que se va a publicar.</param>
            <param name="palabrasClave">Palabras clave para buscar la publicación.</param>
            <param name="frecuenciaDeDisponibilidad">Frecuencia de disponibilidad del material.</param>
            <param name="ubicacion">Ubicación del vendedor.</param>
            <param name="empresa">Nombre de quien vende el material.</param>
        </member>
        <member name="P:Library.Publicacion.Vendedor">
            <summary>
            Gets or sets nombre de quien hace la publicación.
            </summary>
        </member>
        <member name="P:Library.Publicacion.Titulo">
            <summary>
            Se encarga de guardar el título de la publicación dentro del objeto publicación.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Publicacion.Material">
            <summary>
            Se encarga de guardar el material de la publicación dentro del objeto publicación.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Publicacion.PalabrasClave">
            <summary>
            Se encarga de guardar las palabras claves para lograr una búsqueda efectiva dentro del objeto publicación.
            </summary>
        </member>
        <member name="P:Library.Publicacion.FrecuenciaDeDisponibilidad">
            <summary>
            Permite conocer cada cuánto tiempo se genera el mismo y los guarda en el objeto material.
            </summary>
            <value></value>
        </member>
        <member name="M:Library.Publicacion.ConvertToString">
            <summary>
            Método para crear un string con la información de la publicación.
            </summary>
            <returns>String con la información de la publicación.</returns>
        </member>
        <member name="T:Library.Transaccion">
            <summary>
            Clase que modela las transacciones entre emprendedores y empresas o viceversa.
            </summary>
        </member>
        <member name="F:Library.Transaccion.vendedor">
            <summary>
            El vendedor es un objeto del tipo Empresa.
            </summary>
        </member>
        <member name="F:Library.Transaccion.Comprador">
            <summary>
            El Comprador es un objeto de tipo Emprendedor.
            </summary>
        </member>
        <member name="F:Library.Transaccion.Material">
            <summary>
            El NombreDelMaterial es el nombre del material que se vendió o se compró.
            </summary>
        </member>
        <member name="F:Library.Transaccion.Cantidad">
            <summary>
            La cantidad del material que se vendió o se compró.
            </summary>
        </member>
        <member name="M:Library.Transaccion.#ctor(Library.Empresa,Library.Emprendedor,Library.Material,System.Double)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Transaccion"/>.
            Constructor de la clase.
            </summary>
            <param name="vendedor">Vendedor, es un objeto de la clase Empresa.</param>
            <param name="comprador">Comprador, es un objeto de la clase Emprendedor.</param>
            <param name="material">Material de la transacción.</param>
            <param name="cantidad">Cantidad del material, tipo double.</param>
        </member>
        <member name="P:Library.Transaccion.Vendedor">
            <summary>
            Property para el atributo privado vendedor.
            </summary>
            <value></value>
        </member>
        <member name="M:Library.Transaccion.ConvertToString">
            <summary>
            Método para crear un string con la información de la transacción.
            </summary>
            <returns>Devuelve el string con la información de la transacción.</returns>
        </member>
        <member name="T:Library.Ubicacion">
            <summary>
            Clase que modela una ubicación.
            Implementa IUbicacion.
            Colabora con: UbicacionProvider.
            </summary>
        </member>
        <member name="M:Library.Ubicacion.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Ubicacion"/>.
            Constructor de la clase.
            </summary>
            <param name="pais">País donde se ubica.</param>
            <param name="ciudad">Ciudad donde se ubica.</param>
            <param name="direccion">Dirección donde se ubica.</param>
            <param name="codigoPostal">Código postal de donde se ubica.</param>
            <param name="latitud">Latitud de la ubicación.</param>
            <param name="longitud">Longitud de la ubicación.</param>
        </member>
        <member name="P:Library.Ubicacion.Pais">
            <summary>
            Obtiene o establece el País.
            </summary>
            <value>País en donde se encuentra la ubicación.</value>
        </member>
        <member name="P:Library.Ubicacion.Ciudad">
            <summary>
            Obtiene o establece la Ciudad.
            </summary>
            <value>Ciudad en donde se encuentra la ubicación.</value>
        </member>
        <member name="P:Library.Ubicacion.Direccion">
            <summary>
            Obtiene o establece la dirección.
            </summary>
            <value>Dirección en donde se encuentra la ubicación.</value>
        </member>
        <member name="P:Library.Ubicacion.CodigoPostal">
            <summary>
            Obtiene o establece el código postal.
            </summary>
            <value>Código postal donde se encuentra la ubicación.</value>
        </member>
        <member name="P:Library.Ubicacion.Latitud">
            <summary>
            Obtiene o establece la Latitud de las coordenadas.
            </summary>
            <value>Latitud de coordenadas donde se encuentra la ubicación.</value>
        </member>
        <member name="P:Library.Ubicacion.Longitud">
            <summary>
            Obtiene o establece la Longitud de las coordenadas.
            </summary>
            <value>Longitud de coordenadas donde se encuentra la ubicación.</value>
        </member>
        <member name="T:Library.UbicacionProvider">
            <summary>
            Esta clase se encarga de generar una ubicación utilizando la API Location.
            Implementa la interfaz IUbicacionProvider por DIP(Explicado en IUbicacionProvider).
            Depende de IUbicacion y colabora con CrearPublicacionHandler.
            </summary>
        </member>
        <member name="M:Library.UbicacionProvider.GetUbicacion(System.String)">
            <summary>
            GetUbicacion es el método que al pasarle una udirección la convierte en un objeto de tipo IUbicacion.
            </summary>
            <param name="ubicacion">Es la dirección que pasa el cliente.</param>
            <returns>Retorna la ubicación.</returns>
        </member>
        <member name="T:Library.Usuario">
            <summary>
            Clase que modela un usuario no registrado en el bot.
            Depende de la abstracción IUsuario, para que clases como ListaDeUsuario no dependan de una clase concreta (DIP).
            El objetivo de esta clase es proveer una forma de almacenar el Id y Estado de la conversación de usuarios que están
            interactuando con el bot pero aun no se han registrado como empresario o emprendedor.
            Instancias de este objeto son almacenadas en ListaDeUsiarios y, a medida que completan el registro, iran siendo removidas de la
            lista.
            </summary>
        </member>
        <member name="M:Library.Usuario.#ctor(System.Int64,Library.EstadoUsuario)">
            <summary>
            Inicializa una nueva instancia de Usuario.
            </summary>
            <param name="id">Id de tipo long.</param>
            <param name="estado">Estado de tipo EstadoUsuario.</param>
        </member>
        <member name="P:Library.Usuario.Id">
            <summary>
            Obtiene el Id del usuario.
            </summary>
            <value>Propiedad que almacena el id del usuario.</value>
        </member>
        <member name="P:Library.Usuario.Estado">
            <summary>
            Obtiene o Establece el valor de Estado.
            </summary>
            <value>Propiedad de tipo EstadoUsuario que contiene el handler y el paso del mismo en el que se encuentra.</value>
        </member>
        <member name="T:Library.BuscarPublicacion">
            <summary>
            Pregunta por el tipo de búsqueda, pide a la clase correspondiente que la realice y
            devuelve una lista con las coincidencias.
            Además, se deberá preguntar por los parámetros necesarios para la búsqueda.
            En caso de una búsqueda por más de un tipo, se realizan todas las búsquedas y,
            devuelve las coincidencias comunes a todas las búsquedas.
            Esta clase además cumple con el principio SRP, ya que tiene como responsabilidad
            devolver una lista de publicaciones que cumplen con lo buscado, pero delega
            la responsabilidad de buscar a otras clases.
            </summary>
        </member>
        <member name="F:Library.BuscarPublicacion.TipoBusqueda">
            <summary>
            Contiene el tipo de búsqueda que se va a realizar.
            </summary>
        </member>
        <member name="F:Library.BuscarPublicacion.Busqueda">
            <summary>
            Lo que se desea buscar.
            </summary>
        </member>
        <member name="F:Library.BuscarPublicacion.Result">
            <summary>
            Lista de coincidencias de la búsqueda.
            </summary>
        </member>
        <member name="M:Library.BuscarPublicacion.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Library.BuscarPublicacion"/> class.
            Constructor de la clase.
            </summary>
            <param name="tipobusqueda"></param>
            <param name="busqueda"></param>
        </member>
        <member name="M:Library.BuscarPublicacion.EjecutarComando">
            <summary>
            EjecutarComando se encarga de decidir qué tipo de búsqueda se va a realizar(categoría, zona y,
            palabras claves). Luego las delega a cada una de las clases que se encargan de,
            búsqueda, para cumplir con SRP.
            Finalmente, devuelve una lista con todas la publicaciones encontradas, de la búsqueda
            que se realizó.
            </summary>
            <returns>Lista con las publicaciones encontradas.</returns>
        </member>
        <member name="T:Library.BuscarPublicacionHandler">
            <summary>
            Este handler te dirrecciona a la clase BuscarPublicación, implementa AbstractHandler porque
            interactúa con el usuario.
            </summary>
        </member>
        <member name="F:Library.BuscarPublicacionHandler.tipoBusqueda">
            <summary>
            Almacena la manera que el usuario desea buscar una publicación.
            </summary>
        </member>
        <member name="F:Library.BuscarPublicacionHandler.busqueda">
            <summary>
            Lo que desea buscar.
            </summary>
            <summary>
            Atributo que guarda lo que desea buscar el usuario. Público para los tests.
            </summary>
        </member>
        <member name="F:Library.BuscarPublicacionHandler.cantidad">
            <summary>
            Atributo que guarda la cantidad que desea buscar el usuario. Público para los tests.
            </summary>
        </member>
        <member name="F:Library.BuscarPublicacionHandler.resultadoBusqueda">
            <summary>
            Lista que contiene todas las publicaciones encontradas.
            </summary>
        </member>
        <member name="F:Library.BuscarPublicacionHandler.publicacionComprar">
            <summary>
            Atributo que se utiliza para mostrar las publicaciones encontradas al usuario.
            </summary>
        </member>
        <member name="P:Library.BuscarPublicacionHandler.TipoBusqueda">
            <summary>
            Obtiene o establece, se define la property para los tests.
            </summary>
            <value>Lo que ingresa el usuario.</value>
        </member>
        <member name="M:Library.BuscarPublicacionHandler.Handle(Library.Mensaje)">
            <summary>
            Método Handle. Busca una publicación e interactúa con el usuario.
            </summary>
            <param name="mensaje">Mensaje que recibe del usuario.</param>
            <returns>Los mensajes que le envía al usuario por pantalla.</returns>
        </member>
        <member name="T:Library.ComienzoHandler">
            <summary>
            Primer Handler de la Chain of Responsibility. Implementa AbstractHandler porque interactúa
            con el usuario.
            </summary>
        </member>
        <member name="M:Library.ComienzoHandler.Handle(Library.Mensaje)">
            <summary>
            Método que verifica el mensaje. Actúa si el mensaje es "/start" y sino lo envía
            al siguiente Handler.
            </summary>
            <param name="mensaje">Mensaje recibido como parámetro. Contiene Id y el texto a evaluar.</param>
            <returns>Retorna la respuesta a la petición del usuario.</returns>
        </member>
        <member name="T:Library.CrearEmprendedorHandler">
            <summary>
            Handler encargado de crear un emprendedor. Implementa AbstractHandler porque interactúa con el
            usuario.
            </summary>
        </member>
        <member name="P:Library.CrearEmprendedorHandler.Nombre">
            <summary>
            Obtiene o establece la propiedad en donde se guarda el nombre.
            Debería ser privada pero esta publica ya que la nesecitamos utilizar en los tests.
            </summary>
            <value>Nombre que ingresa el usuario al interactuar con el bot.</value>
        </member>
        <member name="P:Library.CrearEmprendedorHandler.Rubro">
            <summary>
            Obtiene o establece la propiedad en donde se guarda el rubro.
            Debería ser privada pero esta publica ya que la nesecitamos utilizar en los tests.
            </summary>
            <value>Rubro que ingresa el usuario al interactuar con el bot.</value>
        </member>
        <member name="P:Library.CrearEmprendedorHandler.Ubicacion">
            <summary>
            Obtiene o establece la propiedad en donde se guarda la ubicacion.
            Debería ser privada pero esta publica ya que la nesecitamos utilizar en los tests.
            </summary>
            <value>Ubicacion que ingresa el usuario al interactuar con el bot.</value>
        </member>
        <member name="P:Library.CrearEmprendedorHandler.Habilitacion">
            <summary>
            Obtiene o establece la propiedad en donde se guardan las habilitaciones.
            Debería ser privada pero esta publica ya que la nesecitamos utilizar en los tests.
            </summary>
            <value>Habilitaciones que ingresa el usuario al interactuar con el bot.</value>
        </member>
        <member name="P:Library.CrearEmprendedorHandler.Especializaciones">
            <summary>
            Obtiene o establece la propiedad en donde se guardan las especializaciones.
            Debería ser privada pero esta publica ya que la nesecitamos utilizar en los tests.
            </summary>
            <value>Especializaciones que ingresa el usuario al interactuar con el bot.</value>
        </member>
        <member name="M:Library.CrearEmprendedorHandler.Handle(Library.Mensaje)">
            <summary>
            Método encargado de crear un emprendedor. El mismo interactúa con el usuario para que le
            dé los datos para crear un emprendedor. Colabora con la clase Emprendedor.
            </summary>
            <param name="mensaje">Indica que se quiere crear un emprendedor.</param>
            <returns>Retorna la respuesta a la petición del usuario.</returns>
        </member>
        <member name="T:Library.CrearPublicacionHandler">
            <summary>
            Handler para crear una publicación. Implementa AbstractHandler porque interactúa
            con el usuario.
            </summary>
        </member>
        <member name="F:Library.CrearPublicacionHandler.NombreMaterial">
            <summary>
            Atributo que guarda el nombre del material.
            </summary>
        </member>
        <member name="F:Library.CrearPublicacionHandler.Categoria">
            <summary>
            Atributo que guarda la categoria del material.
            </summary>
        </member>
        <member name="F:Library.CrearPublicacionHandler.Unidad">
            <summary>
            Atributo que guarda la unidad del material.
            </summary>
        </member>
        <member name="F:Library.CrearPublicacionHandler.Costo">
            <summary>
            Atributo que guarda el costo del material.
            </summary>
        </member>
        <member name="F:Library.CrearPublicacionHandler.Cantidad">
            <summary>
            Atributo que guarda la cantidad del material.
            </summary>
        </member>
        <member name="F:Library.CrearPublicacionHandler.Habilitaciones">
            <summary>
            Atributo que guarda las habilidades que se necesitan para manipular el material.
            </summary>
        </member>
        <member name="F:Library.CrearPublicacionHandler.Titulo">
            <summary>
            Atributo que guarda el titulo de la publicación.
            </summary>
        </member>
        <member name="F:Library.CrearPublicacionHandler.PalabrasClave">
            <summary>
            Atributo que guarda las palabras claves de la publicación.
            </summary>
        </member>
        <member name="F:Library.CrearPublicacionHandler.Frecuencia">
            <summary>
            Atributo que guarda la frecuencia del material.
            </summary>
        </member>
        <member name="F:Library.CrearPublicacionHandler.Localizacion">
            <summary>
            Atributo que guarda la localización del material.
            </summary>
        </member>
        <member name="M:Library.CrearPublicacionHandler.Handle(Library.Mensaje)">
            <summary>
            Método que interpreta el mensaje. Si el mensaje es "/CrearPublicación", el método pide los
            datos de materiales y llama a la clase CrearMaterial para cumplir con el SRP. Luego, se
            llama a la clase CrearPublicacion por la misma razón.
            </summary>
            <param name="mensaje">Mensaje recibido como parámetro. Contiene Id y el texto a evaluar.</param>
            <returns>Retorna la respuesta a la petición del usuario.</returns>
        </member>
        <member name="T:Library.EmpresaCantidadTrabajadores">
            <summary>
            Handler que muestra la cantidad de trabajadores que hay en una empresa. Implementa IHandler
            porque no interactúa con el usuario, solo muestra en pantalla.
            </summary>
        </member>
        <member name="P:Library.EmpresaCantidadTrabajadores.HandlerNext">
            <summary>
            Gets or sets siguiente Handler en la cadena. Obtiene o establece.
            </summary>
            <value>Guarda el handler que sigue.</value>
        </member>
        <member name="M:Library.EmpresaCantidadTrabajadores.Handle(Library.Mensaje)">
            <summary>
            Método que evalúa el mensaje. Busca la empresa y muestra la cantidad de trabajadores que tiene.
            </summary>
            <param name="mensaje">Contiene el Id con el que se encuentra la empresa deseada.</param>
            <returns>Retorna la respuesta a la petición del usuario.</returns>
        </member>
        <member name="T:Library.HistorialHandler">
            <summary>
            Handler para verificar el historial de un usuario. Implementa AbstractHandler porque
            interactúa con el usuario.
            </summary>
        </member>
        <member name="M:Library.HistorialHandler.Handle(Library.Mensaje)">
            <summary>
            Método que evalúa el mensaje. Si el mensaje es "/historial", el Handler le pide el nombre
            al usuario y devuelve el historial de compras/ventas con ese nombre. Si el mensaje es otro,
            se envía al siguiente Handler.
            </summary>
            <param name="mensaje">Indica que se quiere ver el historial.</param>
            <returns>El mensaje que el handler le envía al usuario.</returns>
        </member>
        <member name="T:Library.InvitarHandler">
            <summary>
            Handler para crear una invitacion. Implementa AbstractHandler porque la interacción es
            con el usuario.
            </summary>
        </member>
        <member name="P:Library.InvitarHandler.Ubicacion">
            <summary>
            Obtiene o establece la ubicación.
            </summary>
            <value>Ubicación.</value>
        </member>
        <member name="P:Library.InvitarHandler.Nombre">
            <summary>
            Obtiene o establece el nombre.
            </summary>
            <value>Nombre de la empresa.</value>
        </member>
        <member name="P:Library.InvitarHandler.Token">
            <summary>
            Obtiene o establece el token para la invitación.
            </summary>
            <value>Código de invitación de la empresa.</value>
        </member>
        <member name="P:Library.InvitarHandler.Rubro">
            <summary>
            Obtiene o establece el rubro.
            </summary>
            <value>Rubro de la empresa.</value>
        </member>
        <member name="P:Library.InvitarHandler.Contacto">
            <summary>
            Obtiene o establece en contacto de la empresa.
            </summary>
            <value>Mail o número de teléfono de la empresa</value>
        </member>
        <member name="M:Library.InvitarHandler.Handle(Library.Mensaje)">
            <summary>
            Método para invitar a un usuario. Pide el nombre de un usuario y crea una invitación
            para el mismo?.
            </summary>
            <param name="mensaje">Indica que se quiere crear una invitación.</param>
            <returns>Retorna la espuesta a la peticion del usuario.</returns>
        </member>
        <member name="T:Library.NullHandler">
            <summary>
            Handler vacío, para ser utilizado al final de la cadena y en tests.
            </summary>
        </member>
        <member name="M:Library.NullHandler.Handle(Library.Mensaje)">
            <summary>
            Método que muestra un mensaje, dado que es el último de la cadena.
            </summary>
            <param name="mensaje">Mensaje que recibe del usuario.</param>
            <returns>Devuelve el mensaje para mostrar al usuario.</returns>
        </member>
        <member name="T:Library.RegistrarEmpresarioHandler">
            <summary>
            Handler para registrar un empresario en una empresa. Implementa AbstractHandler
            porque interactúa con el usuario.
            </summary>
        </member>
        <member name="P:Library.RegistrarEmpresarioHandler.InvitacionValida">
            <summary>
            Obtiene o establece un valor que indica si la invitación es válida.
            Debería ser privada pero esta publica ya que la nesecitamos utilizar en los tests.
            </summary>
            <value>Booleano que es resultado de la verificación de la invitación.</value>
        </member>
        <member name="P:Library.RegistrarEmpresarioHandler.Invitacion">
            <summary>
            Obtiene o establece la propiedad en donde se guarda la invitación.
            Debería ser privada pero esta publica ya que la nesecitamos utilizar en los tests.
            </summary>
            <value>Código de invitación que introduce el usuario.</value>
        </member>
        <member name="P:Library.RegistrarEmpresarioHandler.Nombre">
            <summary>
            Obtiene o establece la propiedad en donde se guarda el nombre.
            Debería ser privada pero esta publica ya que la nesecitamos utilizar en los tests.
            </summary>
            <value>Nombre que ingresa el usuario al interactuar con el bot.</value>
        </member>
        <member name="P:Library.RegistrarEmpresarioHandler.Empresa">
            <summary>
            Obtiene o establece la propiedad en donde se guarda o establece la empresa en donde se registro el empresario..
            Debería ser privada pero esta publica ya que la nesecitamos utilizar en los tests.
            </summary>
            <value>Empresa donde se registra el empresario.</value>
        </member>
        <member name="M:Library.RegistrarEmpresarioHandler.Handle(Library.Mensaje)">
            <summary>
            Método encargado de verificar si la invitación es válida. En caso de que lo sea y el
            empresario no esté registrado, lo registra. En caso contrario, le avisa al usuario que no
            es una invitación válida.
            </summary>
            <param name="mensaje">Mensaje recibido como parámetro. Contiene Id y el texto a evaluar.</param>
            <returns>Returna respuesta a la peticion del usuario.</returns>
        </member>
        <member name="T:Library.AbstractHandler">
            <summary>
            Una clase que implementa un metodo para recorrer los distintos handler existentes en busca de un comando escrito por el usuario.
            Como depende de la interfaz IHandler también usa Chain of Resposibility para que los handlers que usen AbstractHandler permitan que se recorran otros handlers.
            También usa singleton porque todos los handlers consultan esta clase para recorrer los handlers.
            </summary>
        </member>
        <member name="P:Library.AbstractHandler.Next">
            <summary>
            Gets or sets las clases que apliquen AbstractHandler pueden tambien pasar el Next para que se recorran el resto de los handlers.
            </summary>
            <value>Se guarda el next handler.</value>
        </member>
        <member name="M:Library.AbstractHandler.Handle(Library.Mensaje)">
            <summary>
            El metodo se fija si no hay ningun comando apuntando al handler. si no hay se pasa al siguiente.
            </summary>
            <param name="mensaje">El emensaje escrito por el usuario.</param>
            <returns>Método Handle que van a implementar las clases que hereden a esta.</returns>
        </member>
        <member name="M:Library.AbstractHandler.SetNext(Library.IHandler)">
            <summary>
            Setter para el siguiente handler en la cadena.
            </summary>
            <param name="handler">Se recibe por parámetro el siguiente handler.</param>
            <returns>retorna el handler.</returns>
        </member>
        <member name="M:Library.AbstractHandler.GetNext">
            <summary>
            Getter para el siguiente handler en la cadena.
            </summary>
            <returns>retorna el handler que sigue.</returns>
        </member>
        <member name="T:Library.IHandler">
            <summary>
            Interfaz para la creación de los handlers.
            Dada la naturaleza de los handlers se usa el patrón Chain of responsibility, asi se puede recorren todos
            los handlers hasta que se encuentre el que se necesita.
            </summary>
        </member>
        <member name="P:Library.IHandler.Next">
            <summary>
            Gets or sets las clases que apliquen IHandler pueden tambien pasar el Next para que se recorran el resto de los handlers.
            </summary>
            <value>Se guardan el recorrido del resto de los handler.</value>
        </member>
        <member name="M:Library.IHandler.Handle(Library.Mensaje)">
            <summary>
            Todos los handlers deben tener un metodo para pasar al siguiente si no existe un comando que actualmente no esté apuntando.
            </summary>
            <param name="mensaje">Mensaje escrito por usuario.</param>
            <returns>Devuelve un string para el usuario.</returns>
        </member>
        <member name="M:Library.IHandler.SetNext(Library.IHandler)">
            <summary>
            Método set para indicar el siguiente handler en la cadena.
            </summary>
            <param name="handler"> handler que esta indicado a continuacion en la cadena.</param>
            <returns>Establece el siguiente handler.</returns>
        </member>
        <member name="M:Library.IHandler.GetNext">
            <summary>
            Método get para obtener el siguiente handler en la cadena.
            </summary>
            <returns>Retorna el handler siguiente.</returns>
        </member>
        <member name="T:Library.IJsonConvertible">
            <summary>
            Define el tipo que tienen los objetos que pueder ser serializados en y deserializados desde texto en formato
            Json.
            </summary>
        </member>
        <member name="M:Library.IJsonConvertible.ConvertToJson">
            <summary>
            Convierte el objeto a texto en formato Json. El objeto puede ser reconstruido a partir del texto en formato
            Json utilizando <see cref="M:Library.IJsonConvertible.LoadFromJson(System.String)"/>.
            </summary>
            <returns>El objeto convertido a texto en formato Json.</returns>
        </member>
        <member name="M:Library.IJsonConvertible.LoadFromJson(System.String)">
            <summary>
            Asigna las propiedades del objeto a partir de texto en formato Json. El texto en formato Json puede ser
            obtenido utilizando <see cref="M:Library.IJsonConvertible.ConvertToJson"/>.
            </summary>
            <param name="json">El texto en formato Json a partir del cual asignas las propiedades del objeto.</param>
        </member>
        <member name="T:Library.IMostrar">
            <summary>
            Interfaz creada para cumplir con el patrón DIP. Permite que las clases dependan de abstracciones
            en vez de clases concretas.
            </summary>
        </member>
        <member name="M:Library.IMostrar.Mostrar(System.Collections.Generic.List{Library.IConversorTexto})">
            <summary>
            Método que construye un string con todos los elementos de la lista.
            </summary>
            <param name="lista">Lista para mostrar en pantalla.</param>
            <returns>Te devuelve los string de la lista.</returns>
        </member>
        <member name="T:Library.IUbicacion">
            <summary>
            Interfaz que modela una ubicación.
            Creada por DIP. Las clases que necesitan trabajar con una o varias ubicaciones ahora dependen de esta abstracción y no de una clase concreta(como podría ser la clase Location
            en LocationApi).
            </summary>
        </member>
        <member name="P:Library.IUbicacion.Pais">
            <summary>
            Gets or sets pais en el que se encuentra la ubicación.
            </summary>
            <value>guarda el pais en donde se encuentra.</value>
        </member>
        <member name="P:Library.IUbicacion.Ciudad">
            <summary>
            Gets or sets ciudad en la que se encuentra la ubicación.
            </summary>
            <value>Guarda la ciudad en la que se encuentra.</value>
        </member>
        <member name="P:Library.IUbicacion.Direccion">
            <summary>
            Gets or sets direccion de la ubicación.
            </summary>
            <value>Guarda la ubicacion en donde se encuentra.</value>
        </member>
        <member name="P:Library.IUbicacion.CodigoPostal">
            <summary>
            Gets or sets codigo postal de la ubicación.
            </summary>
            <value>Guarda el codigo postal de su ubicacion.</value>
        </member>
        <member name="P:Library.IUbicacion.Latitud">
            <summary>
            Gets or sets latitud de las coordenadas de la ubicación.
            </summary>
            <value>Guarda la latitud de la ubicación.</value>
        </member>
        <member name="P:Library.IUbicacion.Longitud">
            <summary>
            Gets or sets longitud de las coordenadas de la ubicación.
            </summary>
            <value>Guarda la longitud de las coordenadas de la ubicacion en donde se encuentra.</value>
        </member>
        <member name="T:Library.IUbicacionProvider">
            <summary>
            Interfaz que modela las clases que obtienen ubicaciones a partir de direcciones. 
            Creada por DIP, las clases que necesiten obtener una ubicacion dependerán de esta abstracción y no de una clase concreta.
            </summary>
        </member>
        <member name="M:Library.IUbicacionProvider.GetUbicacion(System.String)">
            <summary>
            Método para obtener la ubicación de tipo IUbicacion a partir de una dirección en string.
            </summary>
            <param name="ubicacion">Dirección de la que se desea obtener la ubicación.</param>
            <returns>Devuelve la ubicación en formato IUbicacion.</returns>
        </member>
        <member name="T:Library.IUsuario">
            <summary>
             Interfaz que contiene los datos utilizados por empresas y emprendedores.
             Al ser una interfaz, se busca (a través del principio LSP) tener un programa que cumpla con el
             principio OCP. Esto se logra al tener clases que implementen la interfaz, permitiendo extender
             las capacidades del programa sin modificarlo. Se extienden al agregar otras clases que implementen
             la interfaz y sustituyendo en el programa principal.
            </summary>
        </member>
        <member name="P:Library.IUsuario.Id">
            <summary>
            Atributo que contiene el id del usuario.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.IUsuario.Estado">
            <summary>
            Atributo que contiene el estado del usuario, utilizado en los handlers.
            </summary>
            <value></value>
        </member>
        <member name="T:Library.ListaAdministradores">
            <summary>
            Clase que modela un contenedor de los administrdores registradas.
            Tiene la responsabilidad de conocer todos los administradores, buscar un adminstrador a partir de su Id retornando
            un valor booleano que indica si lo encontró.
            Depende de la Clase Administrador.
            Implementa IJsonConvertible para depender de una abstracción y no directamente de los metodos Json.Serialization. (DIP).
            </summary>
        </member>
        <member name="M:Library.ListaAdministradores.ConvertToJson">
            <summary>
            Método que crea una instancia de esta clase y convierte su atributo Administradores en un string
            en formato json.
            </summary>
            <returns>String en formato json.</returns>
        </member>
        <member name="M:Library.ListaAdministradores.LoadFromJson(System.String)">
            <summary>
            Método que crea una instancia de esta clase y, a partir de un string en formato json, carga los administrdores al
            atributo Administradores del objeto.
            </summary>
            <param name="json">String en formato json.</param>
        </member>
        <member name="P:Library.ListaAdministradores.Administradores">
            <summary>
            Obtiene o establece los Administradores registrados en el bot.
            Utiliza el patrón de diseño Singleton para que el atributo sea único y global.
            No es readonly para facilitar el testing.
            </summary>
            <returns>Lista con los administradores.</returns>
        </member>
        <member name="M:Library.ListaAdministradores.Add(Library.Administrador)">
            <summary>
            Se crea el método Add para añadir un Administrador a la Lista evitando duplicados.
            Se pone en esta clase para cumplir el patrón Expert ya que es la que conoce todos los administradores.
            </summary>
            <param name="administrador">Administrador que se desea añadir.</param>
        </member>
        <member name="M:Library.ListaAdministradores.Verificar(System.Int64)">
            <summary>
            Método que verifica si el Id esta registrado como administrador.
            </summary>
            <param name="id">Id a verificar.</param>
            <returns>Devuelve true si el id está en la lista, false en otro caso.</returns>
        </member>
        <member name="T:Library.ListaDeUsuario">
            <summary>
            Clase que modela un contenedor de los usuarios que han interactuado con el bot.
            Tiene la responsabilidad de conocer todos los usuario, verificar si un Id tiene un objeto Usuario asociado,
            y tambien realizar la misma busqueda pero retornando el indice del usuario dentro de la lista.
            Depende de la Clase Usuario.
            Implementa IJsonConvertible para depender de una abstracción y no directamente de los metodos de Json.Serialization. (DIP).
            </summary>
        </member>
        <member name="F:Library.ListaDeUsuario.ListaUsuarios">
            <summary>
            Obtiene o establece la lista que contiene los usuarios que han interactuado con el bot.
            Utiliza el patrón de diseño Singleton para que el atributo sea único y global.
            No es readonly para facilitar el testing.
            </summary>
            <returns>Lista que contiene a todos los usuarios.</returns>
        </member>
        <member name="M:Library.ListaDeUsuario.EstaRegistrado(System.Int64)">
            <summary>
            Método que verifica si un id está registrado como usuario.
            </summary>
            <param name="id">Id que se verifica.</param>
            <returns>Devuelve true si el id está en la lista, false en otros casos.</returns>
        </member>
        <member name="M:Library.ListaDeUsuario.Buscar(System.Int64)">
            <summary>
            Método que devuelve la posición del usuario en la lista.
            </summary>
            <param name="id">Id del usuario que se quiere buscar.</param>
            <returns>Índice del usuario en la lista.</returns>
        </member>
        <member name="M:Library.ListaDeUsuario.ConvertToJson">
            <summary>
            Método que crea una instancia de esta clase y convierte su atributo ListaUsuarios en un string
            en formato json.
            </summary>
            <returns>String en formato json.</returns>
        </member>
        <member name="M:Library.ListaDeUsuario.LoadFromJson(System.String)">
            <summary>
            Método que crea una instancia de esta clase y, a partir de un string en formato json, carga los Usuarios al
            atributo ListaUsuarios del objeto.
            </summary>
            <param name="json">String en formato json.</param>
        </member>
        <member name="M:Library.ListaDeUsuario.Add(Library.Usuario)">
            <summary>
            Se crea el método Add para añadir un Usuario a la Lista evitando duplicados.
            Se pone en esta clase para cumplir el patrón Expert ya que es la que conoce
            a todos los Usuarios.
            </summary>
            <param name="usuario">Usuario que se va a agregar a la lista.</param>
        </member>
        <member name="T:Library.ListaEmprendedores">
            <summary>
            Clase que modela un contenedor de los emprendedores registrados.
            Tiene la responsabilidad de conocer todos los emprendedores, buscar una emprendedor a partir de un Id retornando
            un objeto de tipo emprendedor.
            Depende de la Clase Emprendedor.
            Implementa IJsonConvertible para depender de una abstracción y no directamente de los metodos de Json.Serialization. (DIP).
            </summary>
        </member>
        <member name="M:Library.ListaEmprendedores.ConvertToJson">
            <summary>
            Método que crea una instancia de esta clase y convierte su atributo Emprendedores en un string
            en formato json.
            </summary>
            <returns>String en formato json.</returns>
        </member>
        <member name="M:Library.ListaEmprendedores.LoadFromJson(System.String)">
            <summary>
            Método que crea una instancia de esta clase y, a partir de un string en formato json, carga los Emprendedores al
            atributo Emprendedores del objeto.
            </summary>
            <param name="json">String en formato json.</param>
        </member>
        <member name="F:Library.ListaEmprendedores.Emprendedores">
            <summary>
            Lista que contiene todos los emprendedores registrados.
            Utiliza el patrón de diseño Singleton para que el atributo sea único y global.
            No es readonly para facilitar el testing.
            </summary>
            <returns>Lista con los emprendedores registrados.</returns>
        </member>
        <member name="M:Library.ListaEmprendedores.Add(Library.Emprendedor)">
            <summary>
            Se crea el método Add para añadir un Emprendedor a la ListaEmprendedores
            ya existente.
            Se pone en esta clase para cumplir el patrón Expert ya que es la que conoce
            a todos los Emprendedores.
            </summary>
            <param name="emprendedor">Emprendedor que se desea agregar a la lista.</param>
        </member>
        <member name="M:Library.ListaEmprendedores.Buscar(System.Int64)">
            <summary>
            Método que sirve para buscar un emprendedor por su id. Se incluye en esta clase ya que es la
            que conoce la información de todos los emprendedores (patrón Expert).
            </summary>
            <param name="id">Id del emprendedor a buscar.</param>
            <returns>Devuelve el emprendedor correspondiente al id.</returns>
        </member>
        <member name="T:Library.ListaEmpresa">
            <summary>
            Clase que modela un contenedor de las empresas registradas.
            Tiene la responsabilidad de conocer todas las empresas, buscar una empresa a partir del Id de un empresario retornando
            un valor booleano, y tambien realizar la misma busqueda pero retornando un objeto de tipo Empresa.
            Depende de la Clase Empresa.
            Implementa IJsonConvertible para depender de una abstracción y no directamente de los metodos de Json.Serialization. (DIP).
            </summary>
        </member>
        <member name="P:Library.ListaEmpresa.Empresas">
            <summary>
            Obtiene o establece la lista que contiene las empresas registradas
            Utiliza el patrón de diseño Singleton para que el atributo sea único y global.
            No es readonly para facilitar el testing.
            </summary>
            <returns>Lista que contiene las empresas registradas.</returns>
        </member>
        <member name="M:Library.ListaEmpresa.Verificar(System.Int64)">
            <summary>
            Verifica que existe un empresario con ese id.
            Método creado por expert, ya que esta es la clase que conoce todas las empresas, y tambien tiene acesso a todos sus empresarios.
            </summary>
            <param name="id">Id del empresario a verificar.</param>
            <returns>Devuelve true si el id está registrado en alguna empresa, false en otro caso.</returns>
        </member>
        <member name="M:Library.ListaEmpresa.Buscar(System.Int64)">
            <summary>
            Método Buscar, recorre la lista de empresas y retorna la empresa deseada. Se incluye en esta
            clase ya que es la que conoce a todas las empresas (patrón Expert).
            </summary>
            <param name="id">Id de un empresario de la empresa.</param>
            <returns>Devuelve la empresa que contiene el id pasado por parámetro.</returns>
        </member>
        <member name="M:Library.ListaEmpresa.Add(Library.Empresa)">
            <summary>
            Se crea el método Add para añadir una Empresa a la Lista evitando duplicados.
            Se pone en esta clase para cumplir el patrón Expert ya que es la que conoce
            a todas las Empresas.
            </summary>
            <param name="empresa">Empresa que se va a agregar a la lista.</param>
        </member>
        <member name="M:Library.ListaEmpresa.ConvertToJson">
            <summary>
            Método que crea una instancia de esta clase y convierte su atributo Empresas en un string
            en formato json.
            </summary>
            <returns>String de objeto en formato json.</returns>
        </member>
        <member name="M:Library.ListaEmpresa.LoadFromJson(System.String)">
            <summary>
            Método que crea una instancia de esta clase y, a partir de un string en formato json, carga las empresas al
            atributo Empresas del objeto.
            </summary>
            <param name="json">String en formato json.</param>
        </member>
        <member name="T:Library.ListaInvitaciones">
            <summary>
            Clase que modela un contenedor de las Invitaciones Válidas.
            Tiene la responsabilidad de conocer todas las invitaciones, y verificar que un invitación dada es válida.
            Implementa IJsonConvertible para depender de una abstracción y no directamente de los metodos de Json.Serialization. (DIP).
            </summary>
        </member>
        <member name="F:Library.ListaInvitaciones.invitaciones">
            <summary>
            Lista que contiene todas las invtiaciones.
            Utiliza el patrón de diseño Singleton para que el atributo sea único y global.
            </summary>
            <returns>Lista con todas las invitaciones.</returns>
        </member>
        <member name="M:Library.ListaInvitaciones.VerificarInvitacion(System.String)">
            <summary>
            Método que verifica si una invitación es válida. Se incluye en esta clase porque es la que
            conoce todas las invitaciones (patrón Expert).
            </summary>
            <param name="invitacion">Invitación a verificar.</param>
            <returns>Devuelve true si la invitación está registrada, false si no.</returns>
        </member>
        <member name="M:Library.ListaInvitaciones.ConvertToJson">
            <summary>
            Método que crea una instancia de esta clase y convierte su atributo invitaciones en un string
            en formato json.
            </summary>
            <returns>String en formato json.</returns>
        </member>
        <member name="M:Library.ListaInvitaciones.LoadFromJson(System.String)">
            <summary>
            Método que crea una instancia de esta clase y, a partir de un string en formato json, carga las invitaciones al
            atributo Invitaciones del objeto.
            </summary>
            <param name="json">String en formato json</param>
        </member>
        <member name="M:Library.ListaInvitaciones.Add(System.String)">
            <summary>
            Se crea el método Add para añadir las Invitaciones a la ListaInvitaciones
            ya existente.
            Se pone en esta clase para cumplir el patrón Expert ya que es la que conoce
            todas las invitaciones que existen.
            </summary>
            <param name="invitacion">Invitación que se desea agregar a la lista.</param>
        </member>
        <member name="T:Library.ListaTransacciones">
            <summary>
            Clase que modela un contenedor de las transacciones realizadas.
            Tiene la responsabilidad de conocer todos las transacciones, buscar todas las transacciones que involucran cierto Id retornando
            una lista con las mismas.
            Depende de la Clase Transacción.
            Implementa IJsonConvertible para depender de una abstracción y no directamente de los metodos Json.Serialization. (DIP).
            </summary>
        </member>
        <member name="F:Library.ListaTransacciones.Transacciones">
            <summary>
            Transacciones es quien tiene la lista con los objetos de la clase Transaccion.
            Utiliza el patrón de diseño Singleton para que el atributo sea único y global.
            </summary>
            <returns>Lista con todas las transacciones.</returns>
        </member>
        <member name="M:Library.ListaTransacciones.Add(Library.Transaccion)">
            <summary>
            Se crea el método Add para añadir una Transaccion a la ListaTransacciones
            ya existente.
            Se pone en esta clase para cumplir el patrón Expert ya que es la que conoce
            todas las transacciones que se realizan.
            </summary>
            <param name="transaccion">Transacción que se desea agregar a la lista.</param>
        </member>
        <member name="M:Library.ListaTransacciones.Buscar(System.Int64)">
            <summary>
            Método que devuelve una lista con todas las transacciones hechas con ese id. Se busca cumplir
            con Expert, ya que esta clase es la que contiene toda la información de las transacciones.
            </summary>
            <param name="id">Busca transacciones por id.</param>
            <returns>Devuelve una lista con todas las transacciones encontradas.</returns>
        </member>
        <member name="M:Library.ListaTransacciones.ConvertToJson">
            <summary>
            Método que crea una instancia de esta clase y convierte su atributo Transacciones en un string
            en formato json.
            </summary>
            <returns>String en formato json.</returns>
        </member>
        <member name="M:Library.ListaTransacciones.LoadFromJson(System.String)">
            <summary>
            Método que crea una instancia de esta clase y, a partir de un string en formato json, carga las transacciones al
            atributo Transacciones del objeto.
            </summary>
            <param name="json">String en formato json.</param>
        </member>
        <member name="M:Library.ListaTransacciones.Mostrar(System.Collections.Generic.List{Library.IConversorTexto})">
            <summary>
            Método para mostrar la lista pasada como parámetro en pantalla.
            </summary>
            <param name="lista">Lista que se desea mostrar.</param>
            <returns>Devuelve el stringbuilder con los elementos de la lista.</returns>
        </member>
        <member name="T:Library.RegistroPublicaciones">
            <summary>
            Clase que tiene un registro de las publicaciones activas, eliminadas y pausadas. Tiene la responsabilidad de conocer el estados de las publicaciones.
            Se definen los métodos para encapsular la clase y poder modificar los datos
            sin tener que compartir la información de las listas, cumpliendo con el
            patrón Expert.
            </summary>
        </member>
        <member name="P:Library.RegistroPublicaciones.Activas">
            <summary>
            Obtiene o establece lista con las publicaciones activas.
            Utiliza el patrón de diseño Singleton para que el atributo sea único y global.
            </summary>
            <returns>Lista con las publicaciones activas.</returns>
        </member>
        <member name="M:Library.RegistroPublicaciones.Add(Library.Publicacion)">
            <summary>
            Método para agregar una nueva publicación a la lista de publicaciones activas.
            </summary>
            <param name="publicacion">Publicación a agregar a la lista de publicaciones activas.</param>
        </member>
        <member name="M:Library.RegistroPublicaciones.Mostrar(System.Collections.Generic.List{Library.IConversorTexto})">
            <summary>
            Método para mostrar la lista pasada como parámetro en pantalla.
            </summary>
            <param name="lista">Lista que se desea mostrar.</param>
            <returns>Devuelve el stringbuilder con los elementos de la lista.</returns>
        </member>
        <member name="M:Library.RegistroPublicaciones.ConvertToJson">
            <summary>
            Método que crea una instancia de esta clase y convierte su atributo Activas en un string
            en formato json.
            </summary>
            <returns>String en formato json.</returns>
        </member>
        <member name="M:Library.RegistroPublicaciones.LoadFromJson(System.String)">
            <summary>
            Método que crea una instancia de esta clase y, a partir de un string en formato json, carga las Publicaicones Activas al
            atributo Activas del objeto.
            </summary>
            <param name="json">String en formato json.</param>
        </member>
        <member name="T:Library.Singleton`1">
            <summary>
            Tiene la responsabilidad de hacer que ciertas instancias sean únicas y globales.
            Se usa en los handlers que requieren la utilización del patrón singleton, tales como AbstractHandler y UsuarioInterfaz.
            </summary>
            <typeparam name="T">Tipo genérico que se establece cuando se crea una instancia.</typeparam>
        </member>
        <member name="P:Library.Singleton`1.Instance">
            <summary>
            Obtiene gets se crea una nueva instancia solo si no existe previamente.
            </summary>
            <value>Se guarda una nueva instancia.</value>
        </member>
        <member name="T:Library.Singleton`1">
            <summary>
            Se usa en los handlers que requieren la utilización del patrón singleton, tales como AbstractHandler y UsuarioInterfaz.
            </summary>
            <typeparam name="T">Tipo genérico que se establece cuando se crea una instancia.</typeparam>
        </member>
        <member name="P:Library.Singleton`1.Instance">
            <summary>
            Obtiene gets se crea una nueva instancia solo si no existe previamente.
            </summary>
            <value>Se guarda una nueva instancia.</value>
        </member>
        <member name="T:Library.TelegramBot">
            <summary>
            Clase que contiene datos sobre Telegram, usuarios, etc.
            </summary>
        </member>
        <member name="P:Library.TelegramBot.Client">
            <summary>
            Obtiene el cliente de Telegam.
            </summary>
            <value>client.</value>
        </member>
        <member name="P:Library.TelegramBot.BotId">
            <summary>
            Obtiene el id.
            </summary>
            <value>id.</value>
        </member>
        <member name="P:Library.TelegramBot.BotName">
            <summary>
            Obtiene el nombre del bot.
            </summary>
            <value>Nombre.</value>
        </member>
        <member name="P:Library.TelegramBot.Instance">
            <summary>
            Obtiene una instancia de TelegramBot.
            </summary>
            <value>instancia.</value>
        </member>
    </members>
</doc>
